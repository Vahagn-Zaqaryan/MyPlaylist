"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var loadTests_1 = require("./helpers/loadTests");
var Parser = require('..');
describe('Parser', function () {
    describe('serializeIlpPayment', function () {
        describe('correctly serializes valid ilp packets', function () {
            var validTests = loadTests_1.default({ type: 'ilp_payment' });
            var _loop_1 = function (test_1) {
                it(test_1.name, function () {
                    var json = test_1.json;
                    var serialized = Parser.serializeIlpPayment(json);
                    chai_1.assert.deepEqual(serialized.toString('hex'), test_1.binary);
                });
            };
            for (var _i = 0, validTests_1 = validTests; _i < validTests_1.length; _i++) {
                var test_1 = validTests_1[_i];
                _loop_1(test_1);
            }
        });
    });
    describe('deserializeIlpPayment', function () {
        describe('correctly parses valid ilp packets', function () {
            var validTests = loadTests_1.default({ type: 'ilp_payment' });
            var _loop_2 = function (test_2) {
                it(test_2.name, function () {
                    var binary = new Buffer(test_2.binary, 'hex');
                    var parsed = Parser.deserializeIlpPayment(binary);
                    chai_1.assert.deepEqual(parsed, test_2.json);
                });
            };
            for (var _i = 0, validTests_2 = validTests; _i < validTests_2.length; _i++) {
                var test_2 = validTests_2[_i];
                _loop_2(test_2);
            }
        });
    });
    describe('serializeIlqpLiquidityRequest', function () {
        describe('correctly serializes valid ilqp liquidity requests', function () {
            var validTests = loadTests_1.default({ type: 'ilqp_liquidity_request' });
            var _loop_3 = function (test_3) {
                it(test_3.name, function () {
                    var json = test_3.json;
                    var serialized = Parser.serializeIlqpLiquidityRequest(json);
                    chai_1.assert.deepEqual(serialized.toString('hex'), test_3.binary);
                });
            };
            for (var _i = 0, validTests_3 = validTests; _i < validTests_3.length; _i++) {
                var test_3 = validTests_3[_i];
                _loop_3(test_3);
            }
        });
    });
    describe('deserializeIlqpLiquidityRequest', function () {
        describe('correctly parses valid ilqp liquidity requests', function () {
            var validTests = loadTests_1.default({ type: 'ilqp_liquidity_request' });
            var _loop_4 = function (test_4) {
                it(test_4.name, function () {
                    var binary = new Buffer(test_4.binary, 'hex');
                    var parsed = Parser.deserializeIlqpLiquidityRequest(binary);
                    chai_1.assert.deepEqual(parsed, test_4.json);
                });
            };
            for (var _i = 0, validTests_4 = validTests; _i < validTests_4.length; _i++) {
                var test_4 = validTests_4[_i];
                _loop_4(test_4);
            }
        });
    });
    describe('serializeIlqpLiquidityResponse', function () {
        describe('correctly serializes valid ilqp liquidity responses', function () {
            var validTests = loadTests_1.default({ type: 'ilqp_liquidity_response' });
            var _loop_5 = function (test_5) {
                it(test_5.name, function () {
                    var json = test_5.json;
                    json.expiresAt = new Date(json.expiresAt);
                    json.liquidityCurve = Buffer.from(json.liquidityCurve, 'hex');
                    var serialized = Parser.serializeIlqpLiquidityResponse(json);
                    chai_1.assert.deepEqual(serialized.toString('hex'), test_5.binary);
                });
            };
            for (var _i = 0, validTests_5 = validTests; _i < validTests_5.length; _i++) {
                var test_5 = validTests_5[_i];
                _loop_5(test_5);
            }
        });
    });
    describe('deserializeIlqpLiquidityResponse', function () {
        describe('correctly parses valid ilqp liquidity responses', function () {
            var validTests = loadTests_1.default({ type: 'ilqp_liquidity_response' });
            var _loop_6 = function (test_6) {
                it(test_6.name, function () {
                    var binary = new Buffer(test_6.binary, 'hex');
                    var parsed = Parser.deserializeIlqpLiquidityResponse(binary);
                    parsed.expiresAt = parsed.expiresAt.getTime();
                    parsed.liquidityCurve = parsed.liquidityCurve.toString('hex');
                    chai_1.assert.deepEqual(parsed, test_6.json);
                });
            };
            for (var _i = 0, validTests_6 = validTests; _i < validTests_6.length; _i++) {
                var test_6 = validTests_6[_i];
                _loop_6(test_6);
            }
        });
    });
    describe('serializeIlqpBySourceRequest', function () {
        describe('correctly serializes valid ilqp by source requests', function () {
            var validTests = loadTests_1.default({ type: 'ilqp_by_source_request' });
            var _loop_7 = function (test_7) {
                it(test_7.name, function () {
                    var json = test_7.json;
                    var serialized = Parser.serializeIlqpBySourceRequest(json);
                    chai_1.assert.deepEqual(serialized.toString('hex'), test_7.binary);
                });
            };
            for (var _i = 0, validTests_7 = validTests; _i < validTests_7.length; _i++) {
                var test_7 = validTests_7[_i];
                _loop_7(test_7);
            }
        });
    });
    describe('deserializeIlqpBySourceRequest', function () {
        describe('correctly parses valid ilqp by source requests', function () {
            var validTests = loadTests_1.default({ type: 'ilqp_by_source_request' });
            var _loop_8 = function (test_8) {
                it(test_8.name, function () {
                    var binary = new Buffer(test_8.binary, 'hex');
                    var parsed = Parser.deserializeIlqpBySourceRequest(binary);
                    chai_1.assert.deepEqual(parsed, test_8.json);
                });
            };
            for (var _i = 0, validTests_8 = validTests; _i < validTests_8.length; _i++) {
                var test_8 = validTests_8[_i];
                _loop_8(test_8);
            }
        });
    });
    describe('serializeIlqpBySourceResponse', function () {
        describe('correctly serializes valid ilqp by source responses', function () {
            var validTests = loadTests_1.default({ type: 'ilqp_by_source_response' });
            var _loop_9 = function (test_9) {
                it(test_9.name, function () {
                    var json = test_9.json;
                    var serialized = Parser.serializeIlqpBySourceResponse(json);
                    chai_1.assert.deepEqual(serialized.toString('hex'), test_9.binary);
                });
            };
            for (var _i = 0, validTests_9 = validTests; _i < validTests_9.length; _i++) {
                var test_9 = validTests_9[_i];
                _loop_9(test_9);
            }
        });
    });
    describe('deserializeIlqpBySourceResponse', function () {
        describe('correctly parses valid ilqp by source responses', function () {
            var validTests = loadTests_1.default({ type: 'ilqp_by_source_response' });
            var _loop_10 = function (test_10) {
                it(test_10.name, function () {
                    var binary = new Buffer(test_10.binary, 'hex');
                    var parsed = Parser.deserializeIlqpBySourceResponse(binary);
                    chai_1.assert.deepEqual(parsed, test_10.json);
                });
            };
            for (var _i = 0, validTests_10 = validTests; _i < validTests_10.length; _i++) {
                var test_10 = validTests_10[_i];
                _loop_10(test_10);
            }
        });
    });
    describe('serializeIlqpByDestinationRequest', function () {
        describe('correctly serializes valid ilqp by destination requests', function () {
            var validTests = loadTests_1.default({ type: 'ilqp_by_destination_request' });
            var _loop_11 = function (test_11) {
                it(test_11.name, function () {
                    var json = test_11.json;
                    var serialized = Parser.serializeIlqpByDestinationRequest(json);
                    chai_1.assert.deepEqual(serialized.toString('hex'), test_11.binary);
                });
            };
            for (var _i = 0, validTests_11 = validTests; _i < validTests_11.length; _i++) {
                var test_11 = validTests_11[_i];
                _loop_11(test_11);
            }
        });
    });
    describe('deserializeIlqpByDestinationRequest', function () {
        describe('correctly parses valid ilqp by destination requests', function () {
            var validTests = loadTests_1.default({ type: 'ilqp_by_destination_request' });
            var _loop_12 = function (test_12) {
                it(test_12.name, function () {
                    var binary = new Buffer(test_12.binary, 'hex');
                    var parsed = Parser.deserializeIlqpByDestinationRequest(binary);
                    chai_1.assert.deepEqual(parsed, test_12.json);
                });
            };
            for (var _i = 0, validTests_12 = validTests; _i < validTests_12.length; _i++) {
                var test_12 = validTests_12[_i];
                _loop_12(test_12);
            }
        });
    });
    describe('serializeIlqpByDestinationResponse', function () {
        describe('correctly serializes valid ilqp by destination responses', function () {
            var validTests = loadTests_1.default({ type: 'ilqp_by_destination_response' });
            var _loop_13 = function (test_13) {
                it(test_13.name, function () {
                    var json = test_13.json;
                    var serialized = Parser.serializeIlqpByDestinationResponse(json);
                    chai_1.assert.deepEqual(serialized.toString('hex'), test_13.binary);
                });
            };
            for (var _i = 0, validTests_13 = validTests; _i < validTests_13.length; _i++) {
                var test_13 = validTests_13[_i];
                _loop_13(test_13);
            }
        });
    });
    describe('deserializeIlqpByDestinationResponse', function () {
        describe('correctly parses valid ilqp by destination responses', function () {
            var validTests = loadTests_1.default({ type: 'ilqp_by_destination_response' });
            var _loop_14 = function (test_14) {
                it(test_14.name, function () {
                    var binary = new Buffer(test_14.binary, 'hex');
                    var parsed = Parser.deserializeIlqpByDestinationResponse(binary);
                    chai_1.assert.deepEqual(parsed, test_14.json);
                });
            };
            for (var _i = 0, validTests_14 = validTests; _i < validTests_14.length; _i++) {
                var test_14 = validTests_14[_i];
                _loop_14(test_14);
            }
        });
    });
    describe('serializeIlpError', function () {
        describe('correctly serializes valid ilqp by destination responses', function () {
            var validTests = loadTests_1.default({ type: 'ilp_error' });
            var _loop_15 = function (test_15) {
                it(test_15.name, function () {
                    var json = test_15.json;
                    json.triggeredAt = new Date(json.triggeredAt);
                    var serialized = Parser.serializeIlpError(json);
                    chai_1.assert.deepEqual(serialized.toString('hex'), test_15.binary);
                });
            };
            for (var _i = 0, validTests_15 = validTests; _i < validTests_15.length; _i++) {
                var test_15 = validTests_15[_i];
                _loop_15(test_15);
            }
        });
    });
    describe('deserializeIlpError', function () {
        describe('correctly parses valid ilqp by destination responses', function () {
            var validTests = loadTests_1.default({ type: 'ilp_error' });
            var _loop_16 = function (test_16) {
                it(test_16.name, function () {
                    var binary = new Buffer(test_16.binary, 'hex');
                    var parsed = Parser.deserializeIlpError(binary);
                    parsed.triggeredAt = parsed.triggeredAt.getTime();
                    chai_1.assert.deepEqual(parsed, test_16.json);
                });
            };
            for (var _i = 0, validTests_16 = validTests; _i < validTests_16.length; _i++) {
                var test_16 = validTests_16[_i];
                _loop_16(test_16);
            }
        });
    });
});
//# sourceMappingURL=parser.spec.js.map
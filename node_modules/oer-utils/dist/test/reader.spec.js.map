{"version":3,"file":"reader.spec.js","sourceRoot":"","sources":["../../test/reader.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import Reader from '../src/lib/reader'\n\nimport chai = require('chai')\nconst assert = chai.assert\n\ndescribe('Reader', function () {\n  describe('constructor', function () {\n    it('should create a Reader', function () {\n      const buffer = new Buffer(0)\n      const reader = new Reader(buffer)\n\n      assert.instanceOf(reader, Reader)\n      assert.equal(reader.buffer, buffer)\n    })\n  })\n\n  describe('from', function () {\n    it('should create a Reader', function () {\n      const buffer = new Buffer(0)\n      const reader = Reader.from(buffer)\n\n      assert.instanceOf(reader, Reader)\n      assert.equal(reader.buffer, buffer)\n    })\n\n    it('when cloning a Reader, should slice the buffer from the current position', function () {\n      const reader = Reader.from(new Buffer('0102030405', 'hex'))\n      reader.skip(2)\n      const reader2 = Reader.from(reader)\n\n      assert.instanceOf(reader2, Reader)\n      assert.notEqual(reader2, reader)\n      assert.notEqual(reader2.buffer, reader.buffer)\n      assert.equal(reader2.buffer.length, 3)\n      assert.equal(reader2.buffer.toString('hex'), '030405')\n    })\n\n    it('should throw if the wrong type of source is provided', function () {\n      assert.throws(\n        () => Reader.from('test' as any),\n        'Reader must be given a Buffer'\n      )\n    })\n  })\n\n  describe('bookmark/restore', function () {\n    it('should mark the current position and resume from it', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      reader.readUInt8()\n      reader.bookmark()\n      reader.skip(3)\n      const v1 = reader.readUInt8()\n      reader.restore()\n      const v2 = reader.readUInt8()\n\n      assert.equal(v1, 5)\n      assert.equal(v2, 2)\n    })\n\n    it('should throw when resuming too many times', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      reader.readUInt8()\n      reader.bookmark()\n      reader.skip(3)\n      reader.restore()\n\n      assert.throws(\n        () => reader.restore(),\n        'Cannot restore bookmark when no bookmark set'\n      )\n    })\n  })\n\n  describe('ensureAvailable', function () {\n    it('should succeed when enough bytes are available', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      reader.ensureAvailable(6)\n    })\n\n    it('should throw when not enough bytes are available', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      assert.throws(\n        () => reader.ensureAvailable(7),\n        'Tried to read 7 bytes, but only 6 bytes available'\n      )\n    })\n\n    it('should succeed when enough bytes are available after reading some', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      reader.skip(3)\n\n      reader.ensureAvailable(3)\n    })\n\n    it('should throw when not enough bytes are available', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      reader.skip(3)\n\n      assert.throws(\n        () => reader.ensureAvailable(4),\n        'Tried to read 4 bytes, but only 3 bytes available'\n      )\n    })\n  })\n\n  describe('readUInt', function () {\n    it('should read a one byte integer', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v1 = reader.readUInt(1)\n      const v2 = reader.readUInt(1)\n\n      assert.equal(v1, 1)\n      assert.equal(v2, 2)\n    })\n\n    it('should read a two byte integer', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v1 = reader.readUInt(2)\n      const v2 = reader.readUInt(2)\n\n      assert.equal(v1, 258)\n      assert.equal(v2, 772)\n    })\n\n    it('should read a three byte integer', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v1 = reader.readUInt(3)\n      const v2 = reader.readUInt(3)\n\n      assert.equal(v1, 66051)\n      assert.equal(v2, 263430)\n    })\n\n    it('should read a four byte integer', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v = reader.readUInt(4)\n\n      assert.equal(v, 16909060)\n    })\n\n    it('should read a five byte integer', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v = reader.readUInt(5)\n\n      assert.equal(v, 4328719365)\n    })\n\n    it('should read a six byte integer', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v = reader.readUInt(6)\n\n      assert.equal(v, 1108152157446)\n    })\n\n    it('when trying to read a seven byte integer, should throw', function () {\n      const reader = Reader.from(new Buffer('01020304050607', 'hex'))\n\n      assert.throws(\n        () => reader.readUInt(7),\n        'Tried to read too large integer (requested: 7, max: 6)'\n      )\n    })\n  })\n\n  describe('peekUInt', function () {\n    it('should read a one byte integer', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v1 = reader.peekUInt(1)\n      const v2 = reader.peekUInt(1)\n\n      assert.equal(v1, 1)\n      assert.equal(v2, 1)\n    })\n\n    it('should read a two byte integer', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v1 = reader.peekUInt(2)\n      const v2 = reader.peekUInt(2)\n\n      assert.equal(v1, 258)\n      assert.equal(v2, 258)\n    })\n\n    it('should read a three byte integer', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v1 = reader.peekUInt(3)\n      const v2 = reader.peekUInt(3)\n\n      assert.equal(v1, 66051)\n      assert.equal(v2, 66051)\n    })\n\n    it('should read a four byte integer', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v1 = reader.peekUInt(4)\n      const v2 = reader.peekUInt(4)\n\n      assert.equal(v1, 16909060)\n      assert.equal(v2, 16909060)\n    })\n\n    it('should read a five byte integer', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v1 = reader.peekUInt(5)\n      const v2 = reader.peekUInt(5)\n\n      assert.equal(v1, 4328719365)\n      assert.equal(v2, 4328719365)\n    })\n\n    it('should read a six byte integer', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v1 = reader.peekUInt(6)\n      const v2 = reader.peekUInt(6)\n\n      assert.equal(v1, 1108152157446)\n      assert.equal(v2, 1108152157446)\n    })\n\n    it('when trying to read a seven byte integer, should throw', function () {\n      const reader = Reader.from(new Buffer('01020304050607', 'hex'))\n\n      assert.throws(\n        () => reader.peekUInt(7),\n        'Tried to read too large integer (requested: 7, max: 6)'\n      )\n    })\n\n    it('when trying to read a negative length integer, should throw', function () {\n      const reader = Reader.from(new Buffer('01020304050607', 'hex'))\n\n      assert.throws(\n        () => reader.peekUInt(-1),\n        'Tried to read integer with negative length (provided: -1)'\n      )\n    })\n  })\n\n  describe('skipUInt', function () {\n    it('should skip the given number of bytes', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      reader.skipUInt(5)\n\n      const v = reader.readUInt8()\n\n      assert.equal(v, 6)\n    })\n  })\n\n  describe('readInt', function () {\n    it('should read a one byte integer', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v1 = reader.readInt(1)\n      const v2 = reader.readInt(1)\n\n      assert.equal(v1, 1)\n      assert.equal(v2, 2)\n    })\n\n    it('should read a two byte integer', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v1 = reader.readInt(2)\n      const v2 = reader.readInt(2)\n\n      assert.equal(v1, 258)\n      assert.equal(v2, 772)\n    })\n\n    it('should read a three byte integer', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v1 = reader.readInt(3)\n      const v2 = reader.readInt(3)\n\n      assert.equal(v1, 66051)\n      assert.equal(v2, 263430)\n    })\n\n    it('should read a four byte integer', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v = reader.readInt(4)\n\n      assert.equal(v, 16909060)\n    })\n\n    it('should read a five byte integer', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v = reader.readInt(5)\n\n      assert.equal(v, 4328719365)\n    })\n\n    it('should read a six byte integer', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v = reader.readInt(6)\n\n      assert.equal(v, 1108152157446)\n    })\n\n    it('when trying to read a seven byte integer, should throw', function () {\n      const reader = Reader.from(new Buffer('01020304050607', 'hex'))\n\n      assert.throws(\n        () => reader.readInt(7),\n        'Tried to read too large integer (requested: 7, max: 6)'\n      )\n    })\n  })\n\n  describe('peekInt', function () {\n    it('should read a zero byte integer', function () {\n      const reader = Reader.from(new Buffer(0))\n\n      const v = reader.peekInt(0)\n\n      assert.equal(v, 0)\n    })\n\n    it('should read a one byte integer', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v1 = reader.peekInt(1)\n      const v2 = reader.peekInt(1)\n\n      assert.equal(v1, 1)\n      assert.equal(v2, 1)\n    })\n\n    it('should read a two byte integer', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v1 = reader.peekInt(2)\n      const v2 = reader.peekInt(2)\n\n      assert.equal(v1, 258)\n      assert.equal(v2, 258)\n    })\n\n    it('should read a three byte integer', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v1 = reader.peekInt(3)\n      const v2 = reader.peekInt(3)\n\n      assert.equal(v1, 66051)\n      assert.equal(v2, 66051)\n    })\n\n    it('should read a four byte integer', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v1 = reader.peekInt(4)\n      const v2 = reader.peekInt(4)\n\n      assert.equal(v1, 16909060)\n      assert.equal(v2, 16909060)\n    })\n\n    it('should read a five byte integer', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v1 = reader.peekInt(5)\n      const v2 = reader.peekInt(5)\n\n      assert.equal(v1, 4328719365)\n      assert.equal(v2, 4328719365)\n    })\n\n    it('should read a six byte integer', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v1 = reader.peekInt(6)\n      const v2 = reader.peekInt(6)\n\n      assert.equal(v1, 1108152157446)\n      assert.equal(v2, 1108152157446)\n    })\n\n    it('when trying to read a seven byte integer, should throw', function () {\n      const reader = Reader.from(new Buffer('01020304050607', 'hex'))\n\n      assert.throws(\n        () => reader.peekInt(7),\n        'Tried to read too large integer (requested: 7, max: 6)'\n      )\n    })\n\n    it('when trying to read a negative length integer, should throw', function () {\n      const reader = Reader.from(new Buffer('01020304050607', 'hex'))\n\n      assert.throws(\n        () => reader.peekInt(-1),\n        'Tried to read integer with negative length (provided: -1)'\n      )\n    })\n  })\n\n  describe('skipInt', function () {\n    it('should skip the given number of bytes', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      reader.skipInt(5)\n\n      const v = reader.readInt8()\n\n      assert.equal(v, 6)\n    })\n  })\n\n  describe('readVarUInt', function () {\n    it('when reading a zero byte variable-length integer, should throw', function () {\n      const reader = Reader.from(new Buffer('00', 'hex'))\n\n      assert.throws(\n        () => reader.readVarUInt(),\n        'UInt of length 0 is invalid'\n      )\n    })\n\n    it('should read a one byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('0109', 'hex'))\n\n      const v = reader.readVarUInt()\n\n      assert.equal(v, 9)\n      assert.equal(reader.cursor, 2)\n    })\n\n    it('should read a two byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('020102', 'hex'))\n\n      const v = reader.readVarUInt()\n\n      assert.equal(v, 258)\n      assert.equal(reader.cursor, 3)\n    })\n\n    it('should read a three byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('03010203', 'hex'))\n\n      const v = reader.readVarUInt()\n\n      assert.equal(v, 66051)\n      assert.equal(reader.cursor, 4)\n    })\n\n    it('should read a four byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('0401020304', 'hex'))\n\n      const v = reader.readVarUInt()\n\n      assert.equal(v, 16909060)\n      assert.equal(reader.cursor, 5)\n    })\n\n    it('should read a five byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('050102030405', 'hex'))\n\n      const v = reader.readVarUInt()\n\n      assert.equal(v, 4328719365)\n      assert.equal(reader.cursor, 6)\n    })\n\n    it('should read a six byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('06020304050607', 'hex'))\n\n      const v = reader.readVarUInt()\n\n      assert.equal(v, 2211975595527)\n      assert.equal(reader.cursor, 7)\n    })\n\n    it('when reading a seven byte variable-length integer, should throw', function () {\n      const reader = Reader.from(new Buffer('0701020304050607', 'hex'))\n\n      assert.throws(\n        () => reader.readVarUInt(),\n        'UInt of length 7 too large to parse as integer'\n      )\n    })\n\n    it('when reading a truncated variable-length integer, should throw', function () {\n      const reader = Reader.from(new Buffer('04010203', 'hex'))\n\n      assert.throws(\n        () => reader.readVarUInt(),\n        'Tried to read 4 bytes'\n      )\n    })\n\n    it('when reading a length-only variable-length integer, should throw', function () {\n      const reader = Reader.from(new Buffer('04', 'hex'))\n\n      assert.throws(\n        () => reader.readVarUInt(),\n        'Tried to read 4 bytes'\n      )\n    })\n  })\n\n  describe('peekVarUInt', function () {\n    it('when reading a zero byte variable-length integer, should throw', function () {\n      const reader = Reader.from(new Buffer('00', 'hex'))\n\n      assert.throws(\n        () => reader.peekVarUInt(),\n        'UInt of length 0 is invalid'\n      )\n    })\n\n    it('should read a one byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('0109', 'hex'))\n\n      const v = reader.peekVarUInt()\n\n      assert.equal(v, 9)\n      assert.equal(reader.cursor, 0)\n    })\n\n    it('should read a two byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('020102', 'hex'))\n\n      const v = reader.peekVarUInt()\n\n      assert.equal(v, 258)\n      assert.equal(reader.cursor, 0)\n    })\n\n    it('should read a three byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('03010203', 'hex'))\n\n      const v = reader.peekVarUInt()\n\n      assert.equal(v, 66051)\n      assert.equal(reader.cursor, 0)\n    })\n\n    it('should read a four byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('0401020304', 'hex'))\n\n      const v = reader.peekVarUInt()\n\n      assert.equal(v, 16909060)\n      assert.equal(reader.cursor, 0)\n    })\n\n    it('should read a five byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('050102030405', 'hex'))\n\n      const v = reader.peekVarUInt()\n\n      assert.equal(v, 4328719365)\n      assert.equal(reader.cursor, 0)\n    })\n\n    it('should read a six byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('06020304050607', 'hex'))\n\n      const v = reader.peekVarUInt()\n\n      assert.equal(v, 2211975595527)\n      assert.equal(reader.cursor, 0)\n    })\n\n    it('when reading a seven byte variable-length integer, should throw', function () {\n      const reader = Reader.from(new Buffer('0701020304050607', 'hex'))\n\n      assert.throws(\n        () => reader.peekVarUInt(),\n        'UInt of length 7 too large to parse as integer'\n      )\n    })\n  })\n\n  describe('skipVarUInt', function () {\n    it.skip('when skipping a zero byte variable-length integer, should throw', function () {\n      const reader = Reader.from(new Buffer('00', 'hex'))\n\n      assert.throws(\n        () => reader.skipVarUInt(),\n        'UInt of length 0 is invalid'\n      )\n    })\n\n    it('should skip a one byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('0101', 'hex'))\n\n      reader.skipVarUInt()\n\n      assert.equal(reader.cursor, 2)\n    })\n\n    it('should skip a two byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('020102', 'hex'))\n\n      reader.skipVarUInt()\n\n      assert.equal(reader.cursor, 3)\n    })\n\n    it('should skip a three byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('03010203', 'hex'))\n\n      reader.skipVarUInt()\n\n      assert.equal(reader.cursor, 4)\n    })\n\n    it('should skip a four byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('0401020304', 'hex'))\n\n      reader.skipVarUInt()\n\n      assert.equal(reader.cursor, 5)\n    })\n\n    it('should skip a five byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('050102030405', 'hex'))\n\n      reader.skipVarUInt()\n\n      assert.equal(reader.cursor, 6)\n    })\n\n    it('should skip a six byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('06010203040506', 'hex'))\n\n      reader.skipVarUInt()\n\n      assert.equal(reader.cursor, 7)\n    })\n\n    it.skip('when skipping a seven byte variable-length integer, should throw', function () {\n      const reader = Reader.from(new Buffer('0701020304050607', 'hex'))\n\n      assert.throws(\n        () => reader.skipVarUInt(),\n        'UInt of length 7 too large to parse as integer'\n      )\n    })\n  })\n\n  describe('readVarInt', function () {\n    it('when reading a zero byte variable-length integer, should throw', function () {\n      const reader = Reader.from(new Buffer('00', 'hex'))\n\n      assert.throws(\n        () => reader.readVarInt(),\n        'Int of length 0 is invalid'\n      )\n    })\n\n    it('should read a one byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('0109', 'hex'))\n\n      const v = reader.readVarInt()\n\n      assert.equal(v, 9)\n      assert.equal(reader.cursor, 2)\n    })\n\n    it('should read a two byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('020102', 'hex'))\n\n      const v = reader.readVarInt()\n\n      assert.equal(v, 258)\n      assert.equal(reader.cursor, 3)\n    })\n\n    it('should read a three byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('03010203', 'hex'))\n\n      const v = reader.readVarInt()\n\n      assert.equal(v, 66051)\n      assert.equal(reader.cursor, 4)\n    })\n\n    it('should read a four byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('0401020304', 'hex'))\n\n      const v = reader.readVarInt()\n\n      assert.equal(v, 16909060)\n      assert.equal(reader.cursor, 5)\n    })\n\n    it('should read a five byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('050102030405', 'hex'))\n\n      const v = reader.readVarInt()\n\n      assert.equal(v, 4328719365)\n      assert.equal(reader.cursor, 6)\n    })\n\n    it('should read a six byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('06020304050607', 'hex'))\n\n      const v = reader.readVarInt()\n\n      assert.equal(v, 2211975595527)\n      assert.equal(reader.cursor, 7)\n    })\n\n    it('when reading a seven byte variable-length integer, should throw', function () {\n      const reader = Reader.from(new Buffer('0701020304050607', 'hex'))\n\n      assert.throws(\n        () => reader.readVarInt(),\n        'Int of length 7 too large to parse as integer'\n      )\n    })\n\n    it('when reading a truncated variable-length integer, should throw', function () {\n      const reader = Reader.from(new Buffer('04010203', 'hex'))\n\n      assert.throws(\n        () => reader.readVarInt(),\n        'Tried to read 4 bytes'\n      )\n    })\n\n    it('when reading a length-only variable-length integer, should throw', function () {\n      const reader = Reader.from(new Buffer('04', 'hex'))\n\n      assert.throws(\n        () => reader.readVarInt(),\n        'Tried to read 4 bytes'\n      )\n    })\n  })\n\n  describe('peekVarInt', function () {\n    it('when reading a zero byte variable-length integer, should throw', function () {\n      const reader = Reader.from(new Buffer('00', 'hex'))\n\n      assert.throws(\n        () => reader.peekVarInt(),\n        'Int of length 0 is invalid'\n      )\n    })\n\n    it('should read a one byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('0109', 'hex'))\n\n      const v = reader.peekVarInt()\n\n      assert.equal(v, 9)\n      assert.equal(reader.cursor, 0)\n    })\n\n    it('should read a two byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('020102', 'hex'))\n\n      const v = reader.peekVarInt()\n\n      assert.equal(v, 258)\n      assert.equal(reader.cursor, 0)\n    })\n\n    it('should read a three byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('03010203', 'hex'))\n\n      const v = reader.peekVarInt()\n\n      assert.equal(v, 66051)\n      assert.equal(reader.cursor, 0)\n    })\n\n    it('should read a four byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('0401020304', 'hex'))\n\n      const v = reader.peekVarInt()\n\n      assert.equal(v, 16909060)\n      assert.equal(reader.cursor, 0)\n    })\n\n    it('should read a five byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('050102030405', 'hex'))\n\n      const v = reader.peekVarInt()\n\n      assert.equal(v, 4328719365)\n      assert.equal(reader.cursor, 0)\n    })\n\n    it('should read a six byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('06020304050607', 'hex'))\n\n      const v = reader.peekVarInt()\n\n      assert.equal(v, 2211975595527)\n      assert.equal(reader.cursor, 0)\n    })\n\n    it('when reading a seven byte variable-length integer, should throw', function () {\n      const reader = Reader.from(new Buffer('0701020304050607', 'hex'))\n\n      assert.throws(\n        () => reader.peekVarInt(),\n        'Int of length 7 too large to parse as integer'\n      )\n    })\n  })\n\n  describe('skipVarInt', function () {\n    it.skip('when skipping a zero byte variable-length integer, should throw', function () {\n      const reader = Reader.from(new Buffer('00', 'hex'))\n\n      assert.throws(\n        () => reader.skipVarInt(),\n        'Int of length 0 is invalid'\n      )\n    })\n\n    it('should skip a one byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('0101', 'hex'))\n\n      reader.skipVarInt()\n\n      assert.equal(reader.cursor, 2)\n    })\n\n    it('should skip a two byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('020102', 'hex'))\n\n      reader.skipVarInt()\n\n      assert.equal(reader.cursor, 3)\n    })\n\n    it('should skip a three byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('03010203', 'hex'))\n\n      reader.skipVarInt()\n\n      assert.equal(reader.cursor, 4)\n    })\n\n    it('should skip a four byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('0401020304', 'hex'))\n\n      reader.skipVarInt()\n\n      assert.equal(reader.cursor, 5)\n    })\n\n    it('should skip a five byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('050102030405', 'hex'))\n\n      reader.skipVarInt()\n\n      assert.equal(reader.cursor, 6)\n    })\n\n    it('should skip a six byte variable-length integer', function () {\n      const reader = Reader.from(new Buffer('06010203040506', 'hex'))\n\n      reader.skipVarInt()\n\n      assert.equal(reader.cursor, 7)\n    })\n\n    it.skip('when skipping a seven byte variable-length integer, should throw', function () {\n      const reader = Reader.from(new Buffer('0701020304050607', 'hex'))\n\n      assert.throws(\n        () => reader.skipVarInt(),\n        'Int of length 7 too large to parse as integer'\n      )\n    })\n  })\n\n  describe('readOctetString', function () {\n    it('should read a zero length octet string', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v = reader.readOctetString(0)\n\n      assert.equal(v.toString('hex'), '')\n      assert.equal(reader.cursor, 0)\n    })\n\n    it('should read a one byte long octet string', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v = reader.readOctetString(1)\n\n      assert.equal(v.toString('hex'), '01')\n      assert.equal(reader.cursor, 1)\n    })\n\n    it('should read a two byte long octet string', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v = reader.readOctetString(2)\n\n      assert.equal(v.toString('hex'), '0102')\n      assert.equal(reader.cursor, 2)\n    })\n\n    it('when reading past the end of the buffer, should throw', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      assert.throws(() => reader.readOctetString(7))\n    })\n  })\n\n  describe('peekOctetString', function () {\n    it('should read a zero length octet string', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v = reader.peekOctetString(0)\n\n      assert.equal(v.toString('hex'), '')\n      assert.equal(reader.cursor, 0)\n    })\n\n    it('should read a one byte long octet string', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v = reader.peekOctetString(1)\n\n      assert.equal(v.toString('hex'), '01')\n      assert.equal(reader.cursor, 0)\n    })\n\n    it('should read a two byte long octet string', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v = reader.peekOctetString(2)\n\n      assert.equal(v.toString('hex'), '0102')\n      assert.equal(reader.cursor, 0)\n    })\n\n    it('when reading past the end of the buffer, should throw', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      assert.throws(() => reader.peekOctetString(7))\n    })\n  })\n\n  describe('skipOctetString', function () {\n    it('should read a zero length octet string', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      reader.skipOctetString(0)\n\n      assert.equal(reader.cursor, 0)\n    })\n\n    it('should read a one byte long octet string', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      reader.skipOctetString(1)\n\n      assert.equal(reader.cursor, 1)\n    })\n\n    it('should read a two byte long octet string', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      reader.skipOctetString(2)\n\n      assert.equal(reader.cursor, 2)\n    })\n\n    it('when reading past the end of the buffer, should throw', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      assert.throws(() => reader.skipOctetString(7))\n    })\n  })\n\n  describe('readLengthPrefix', function () {\n    it('should read a zero length prefix', function () {\n      const reader = Reader.from(new Buffer('00', 'hex'))\n\n      const v = reader.readLengthPrefix()\n\n      assert.equal(v, 0)\n      assert.equal(reader.cursor, 1)\n    })\n\n    it('should read a small length prefix', function () {\n      const reader = Reader.from(new Buffer('7f', 'hex'))\n\n      const v = reader.readLengthPrefix()\n\n      assert.equal(v, 127)\n      assert.equal(reader.cursor, 1)\n    })\n\n    it('should read a large length prefix', function () {\n      const reader = Reader.from(new Buffer('86010203040506', 'hex'))\n\n      const v = reader.readLengthPrefix()\n\n      assert.equal(v, 1108152157446)\n      assert.equal(reader.cursor, 7)\n    })\n\n    it('should throw when length is greater than six bytes', function () {\n      const reader = Reader.from(new Buffer('8701020304050607', 'hex'))\n\n      assert.throws(\n        () => reader.readLengthPrefix(),\n        'Tried to read too large integer (requested: 7, max: 6)'\n      )\n    })\n\n    it('should throw when length prefix is 0x80 (non-canonical)', function () {\n      const reader = Reader.from(new Buffer('80', 'hex'))\n\n      assert.throws(\n        () => reader.readLengthPrefix(),\n        'Length prefix encoding is not canonical: 0 encoded in 0 bytes'\n      )\n    })\n\n    it('should throw when length prefix is 0x8100 (non-canonical)', function () {\n      const reader = Reader.from(new Buffer('8100', 'hex'))\n\n      assert.throws(\n        () => reader.readLengthPrefix(),\n        'Length prefix encoding is not canonical: 0 encoded in 1 bytes'\n      )\n    })\n\n    it('should throw when length prefix is 0x8101 (non-canonical)', function () {\n      const reader = Reader.from(new Buffer('810100', 'hex'))\n\n      assert.throws(\n        () => reader.readLengthPrefix(),\n        'Length prefix encoding is not canonical: 1 encoded in 1 bytes'\n      )\n    })\n\n    it('should throw when length prefix is 0x820001 (non-canonical)', function () {\n      const reader = Reader.from(new Buffer('82000100', 'hex'))\n\n      assert.throws(\n        () => reader.readLengthPrefix(),\n        'Length prefix encoding is not canonical: 1 encoded in 2 bytes'\n      )\n    })\n  })\n\n  describe('readVarOctetString', function () {\n    it('should read a zero length octet string', function () {\n      const reader = Reader.from(new Buffer('00010203040506', 'hex'))\n\n      const v = reader.readVarOctetString()\n\n      assert.equal(v.toString('hex'), '')\n      assert.equal(reader.cursor, 1)\n    })\n\n    it('should read a one byte long octet string', function () {\n      const reader = Reader.from(new Buffer('01010203040506', 'hex'))\n\n      const v = reader.readVarOctetString()\n\n      assert.equal(v.toString('hex'), '01')\n      assert.equal(reader.cursor, 2)\n    })\n\n    it('should read a two byte long octet string', function () {\n      const reader = Reader.from(new Buffer('02010203040506', 'hex'))\n\n      const v = reader.readVarOctetString()\n\n      assert.equal(v.toString('hex'), '0102')\n      assert.equal(reader.cursor, 3)\n    })\n\n    it('when reading past the end of the buffer, should throw', function () {\n      const reader = Reader.from(new Buffer('07010203040506', 'hex'))\n\n      assert.throws(\n        () => reader.readVarOctetString(),\n        'Tried to read 7 bytes, but only 6 bytes available'\n      )\n    })\n  })\n\n  describe('peekVarOctetString', function () {\n    it('should read a zero length octet string', function () {\n      const reader = Reader.from(new Buffer('00010203040506', 'hex'))\n\n      const v = reader.peekVarOctetString()\n\n      assert.equal(v.toString('hex'), '')\n      assert.equal(reader.cursor, 0)\n    })\n\n    it('should read a one byte long octet string', function () {\n      const reader = Reader.from(new Buffer('01010203040506', 'hex'))\n\n      const v = reader.peekVarOctetString()\n\n      assert.equal(v.toString('hex'), '01')\n      assert.equal(reader.cursor, 0)\n    })\n\n    it('should read a two byte long octet string', function () {\n      const reader = Reader.from(new Buffer('02010203040506', 'hex'))\n\n      const v = reader.peekVarOctetString()\n\n      assert.equal(v.toString('hex'), '0102')\n      assert.equal(reader.cursor, 0)\n    })\n\n    it('when reading past the end of the buffer, should throw', function () {\n      const reader = Reader.from(new Buffer('07010203040506', 'hex'))\n\n      assert.throws(\n        () => reader.peekVarOctetString(),\n        'Tried to read 7 bytes, but only 6 bytes available'\n      )\n    })\n  })\n\n  describe('skipVarOctetString', function () {\n    it('should skip a zero length octet string', function () {\n      const reader = Reader.from(new Buffer('00010203040506', 'hex'))\n\n      reader.skipVarOctetString()\n\n      assert.equal(reader.cursor, 1)\n    })\n\n    it('should skip a one byte long octet string', function () {\n      const reader = Reader.from(new Buffer('01010203040506', 'hex'))\n\n      reader.skipVarOctetString()\n\n      assert.equal(reader.cursor, 2)\n    })\n\n    it('should skip a two byte long octet string', function () {\n      const reader = Reader.from(new Buffer('02010203040506', 'hex'))\n\n      reader.skipVarOctetString()\n\n      assert.equal(reader.cursor, 3)\n    })\n\n    it('when skiping past the end of the buffer, should throw', function () {\n      const reader = Reader.from(new Buffer('07010203040506', 'hex'))\n\n      assert.throws(\n        () => reader.skipVarOctetString(),\n        'Tried to read 7 bytes, but only 6 bytes available'\n      )\n    })\n  })\n\n  describe('read', function () {\n    it('should read a zero length octet string', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v = reader.read(0)\n\n      assert.equal(v.toString('hex'), '')\n      assert.equal(reader.cursor, 0)\n    })\n\n    it('should read a one byte long octet string', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v = reader.read(1)\n\n      assert.equal(v.toString('hex'), '01')\n      assert.equal(reader.cursor, 1)\n    })\n\n    it('should read a two byte long octet string', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v = reader.read(2)\n\n      assert.equal(v.toString('hex'), '0102')\n      assert.equal(reader.cursor, 2)\n    })\n\n    it('when reading past the end of the buffer, should throw', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      assert.throws(() => reader.read(7))\n    })\n  })\n\n  describe('peek', function () {\n    it('should read a zero length octet string', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v = reader.peek(0)\n\n      assert.equal(v.toString('hex'), '')\n      assert.equal(reader.cursor, 0)\n    })\n\n    it('should read a one byte long octet string', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v = reader.peek(1)\n\n      assert.equal(v.toString('hex'), '01')\n      assert.equal(reader.cursor, 0)\n    })\n\n    it('should read a two byte long octet string', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      const v = reader.peek(2)\n\n      assert.equal(v.toString('hex'), '0102')\n      assert.equal(reader.cursor, 0)\n    })\n\n    it('when reading past the end of the buffer, should throw', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      assert.throws(() => reader.peek(7))\n    })\n  })\n\n  describe('skip', function () {\n    it('should read a zero length octet string', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      reader.skip(0)\n\n      assert.equal(reader.cursor, 0)\n    })\n\n    it('should read a one byte long octet string', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      reader.skip(1)\n\n      assert.equal(reader.cursor, 1)\n    })\n\n    it('should read a two byte long octet string', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      reader.skip(2)\n\n      assert.equal(reader.cursor, 2)\n    })\n\n    it('when reading past the end of the buffer, should throw', function () {\n      const reader = Reader.from(new Buffer('010203040506', 'hex'))\n\n      assert.throws(() => reader.skip(7))\n    })\n  })\n\n  describe('readUInt8', function () {\n    it('should read an 8-bit unsigned integer', function () {\n      const reader = Reader.from(new Buffer('ff', 'hex'))\n\n      const v = reader.readUInt8()\n\n      assert.equal(v, 255)\n      assert.equal(reader.cursor, 1)\n    })\n  })\n\n  describe('readUInt16', function () {\n    it('should read an 16-bit unsigned integer', function () {\n      const reader = Reader.from(new Buffer('ffff', 'hex'))\n\n      const v = reader.readUInt16()\n\n      assert.equal(v, 65535)\n      assert.equal(reader.cursor, 2)\n    })\n  })\n\n  describe('readUInt32', function () {\n    it('should read an 32-bit unsigned integer', function () {\n      const reader = Reader.from(new Buffer('ffffffff', 'hex'))\n\n      const v = reader.readUInt32()\n\n      assert.equal(v, 4294967295)\n      assert.equal(reader.cursor, 4)\n    })\n  })\n\n  describe('readUInt64', function () {\n    it('should read an 64-bit unsigned integer', function () {\n      const reader = Reader.from(new Buffer('01010101ffffffff', 'hex'))\n\n      const v = reader.readUInt64()\n\n      assert.deepEqual(v, [16843009, 4294967295])\n      assert.equal(reader.cursor, 8)\n    })\n  })\n\n  describe('peekUInt8', function () {\n    it('should read an 8-bit unsigned integer', function () {\n      const reader = Reader.from(new Buffer('ff', 'hex'))\n\n      const v = reader.peekUInt8()\n\n      assert.equal(v, 255)\n      assert.equal(reader.cursor, 0)\n    })\n  })\n\n  describe('peekUInt16', function () {\n    it('should read an 16-bit unsigned integer', function () {\n      const reader = Reader.from(new Buffer('ffff', 'hex'))\n\n      const v = reader.peekUInt16()\n\n      assert.equal(v, 65535)\n      assert.equal(reader.cursor, 0)\n    })\n  })\n\n  describe('peekUInt32', function () {\n    it('should read an 32-bit unsigned integer', function () {\n      const reader = Reader.from(new Buffer('ffffffff', 'hex'))\n\n      const v = reader.peekUInt32()\n\n      assert.equal(v, 4294967295)\n      assert.equal(reader.cursor, 0)\n    })\n  })\n\n  describe('peekUInt64', function () {\n    it('should read an 64-bit unsigned integer', function () {\n      const reader = Reader.from(new Buffer('01010101ffffffff', 'hex'))\n\n      const v = reader.peekUInt64()\n\n      assert.deepEqual(v, [16843009, 4294967295])\n      assert.equal(reader.cursor, 0)\n    })\n  })\n\n  describe('skipUInt8', function () {\n    it('should read an 8-bit unsigned integer', function () {\n      const reader = Reader.from(new Buffer('ff', 'hex'))\n\n      reader.skipUInt8()\n\n      assert.equal(reader.cursor, 1)\n    })\n  })\n\n  describe('skipUInt16', function () {\n    it('should read an 16-bit unsigned integer', function () {\n      const reader = Reader.from(new Buffer('ffff', 'hex'))\n\n      reader.skipUInt16()\n\n      assert.equal(reader.cursor, 2)\n    })\n  })\n\n  describe('skipUInt32', function () {\n    it('should read an 32-bit unsigned integer', function () {\n      const reader = Reader.from(new Buffer('ffffffff', 'hex'))\n\n      reader.skipUInt32()\n\n      assert.equal(reader.cursor, 4)\n    })\n  })\n\n  describe('skipUInt64', function () {\n    it('should read an 64-bit unsigned integer', function () {\n      const reader = Reader.from(new Buffer('01010101ffffffff', 'hex'))\n\n      reader.skipUInt64()\n\n      assert.equal(reader.cursor, 8)\n    })\n  })\n\n  describe('readInt8', function () {\n    it('should read an 8-bit unsigned integer', function () {\n      const reader = Reader.from(new Buffer('ff', 'hex'))\n\n      const v = reader.readInt8()\n\n      assert.equal(v, -1)\n      assert.equal(reader.cursor, 1)\n    })\n  })\n\n  describe('readInt16', function () {\n    it('should read an 16-bit unsigned integer', function () {\n      const reader = Reader.from(new Buffer('ffff', 'hex'))\n\n      const v = reader.readInt16()\n\n      assert.equal(v, -1)\n      assert.equal(reader.cursor, 2)\n    })\n  })\n\n  describe('readInt32', function () {\n    it('should read an 32-bit unsigned integer', function () {\n      const reader = Reader.from(new Buffer('ffffffff', 'hex'))\n\n      const v = reader.readInt32()\n\n      assert.equal(v, -1)\n      assert.equal(reader.cursor, 4)\n    })\n  })\n\n  describe.skip('readInt64', function () {\n    it('should read an 64-bit unsigned integer', function () {\n      // const reader = Reader.from(new Buffer('01010101ffffffff', 'hex'))\n      //\n      // const v = reader.readInt64()\n      //\n      // assert.deepEqual(v, [16843009, 4294967295])\n      // assert.equal(reader.cursor, 8)\n    })\n  })\n\n  describe('peekInt8', function () {\n    it('should read an 8-bit unsigned integer', function () {\n      const reader = Reader.from(new Buffer('ff', 'hex'))\n\n      const v = reader.peekInt8()\n\n      assert.equal(v, -1)\n      assert.equal(reader.cursor, 0)\n    })\n  })\n\n  describe('peekInt16', function () {\n    it('should read an 16-bit unsigned integer', function () {\n      const reader = Reader.from(new Buffer('ffff', 'hex'))\n\n      const v = reader.peekInt16()\n\n      assert.equal(v, -1)\n      assert.equal(reader.cursor, 0)\n    })\n  })\n\n  describe('peekInt32', function () {\n    it('should read an 32-bit unsigned integer', function () {\n      const reader = Reader.from(new Buffer('ffffffff', 'hex'))\n\n      const v = reader.peekInt32()\n\n      assert.equal(v, -1)\n      assert.equal(reader.cursor, 0)\n    })\n  })\n\n  describe.skip('peekInt64', function () {\n    it('should read an 64-bit unsigned integer', function () {\n      // const reader = Reader.from(new Buffer('01010101ffffffff', 'hex'))\n      //\n      // const v = reader.peekInt64()\n      //\n      // assert.deepEqual(v, [16843009, 4294967295])\n      // assert.equal(reader.cursor, 0)\n    })\n  })\n\n  describe('skipInt8', function () {\n    it('should read an 8-bit unsigned integer', function () {\n      const reader = Reader.from(new Buffer('ff', 'hex'))\n\n      reader.skipInt8()\n\n      assert.equal(reader.cursor, 1)\n    })\n  })\n\n  describe('skipInt16', function () {\n    it('should read an 16-bit unsigned integer', function () {\n      const reader = Reader.from(new Buffer('ffff', 'hex'))\n\n      reader.skipInt16()\n\n      assert.equal(reader.cursor, 2)\n    })\n  })\n\n  describe('skipInt32', function () {\n    it('should read an 32-bit unsigned integer', function () {\n      const reader = Reader.from(new Buffer('ffffffff', 'hex'))\n\n      reader.skipInt32()\n\n      assert.equal(reader.cursor, 4)\n    })\n  })\n\n  describe.skip('skipInt64', function () {\n    it('should read an 64-bit unsigned integer', function () {\n      // const reader = Reader.from(new Buffer('01010101ffffffff', 'hex'))\n      //\n      // reader.skipInt64()\n      //\n      // assert.equal(reader.cursor, 8)\n    })\n  })\n})\n"]}
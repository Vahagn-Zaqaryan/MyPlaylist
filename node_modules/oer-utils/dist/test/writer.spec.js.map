{"version":3,"file":"writer.spec.js","sourceRoot":"","sources":["../../test/writer.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import Writer from '../src/lib/writer'\n\nimport chai = require('chai')\nconst assert = chai.assert\n\ndescribe('Writer', function () {\n  describe('constructor', function () {\n    it('should create a writer', function () {\n      const writer = new Writer()\n\n      assert.instanceOf(writer, Writer)\n    })\n  })\n\n  describe('writeUInt', function () {\n    it('when writing a zero byte integer, should throw', function () {\n      const writer = new Writer()\n\n      assert.throws(\n        () => writer.writeUInt(0, 0),\n        'UInt length must be greater than zero'\n      )\n    })\n\n    it('should write a one byte integer zero', function () {\n      const writer = new Writer()\n\n      writer.writeUInt(0, 1)\n\n      assert.equal(writer.getBuffer().toString('hex'), '00')\n    })\n\n    it('should write a one byte integer one', function () {\n      const writer = new Writer()\n\n      writer.writeUInt(1, 1)\n\n      assert.equal(writer.getBuffer().toString('hex'), '01')\n    })\n\n    it('should write a one byte integer 255', function () {\n      const writer = new Writer()\n\n      writer.writeUInt(255, 1)\n\n      assert.equal(writer.getBuffer().toString('hex'), 'ff')\n    })\n\n    it('should write a two byte integer', function () {\n      const writer = new Writer()\n\n      writer.writeUInt(258, 2)\n\n      assert.equal(writer.getBuffer().toString('hex'), '0102')\n    })\n\n    it('when asked to write an integer that does not fit, should throw', function () {\n      const writer = new Writer()\n\n      assert.throws(\n        () => writer.writeUInt(256, 1),\n        'UInt 256 does not fit in 1 bytes'\n      )\n    })\n\n    it('when asked to write an integer outside of safe JavaScript range, should throw', function () {\n      const writer = new Writer()\n\n      assert.throws(\n        () => writer.writeUInt(Number.MAX_SAFE_INTEGER + 1, 1),\n        'UInt is larger than safe JavaScript range'\n      )\n    })\n\n    it('when asked to write a negative integer, should throw', function () {\n      const writer = new Writer()\n\n      assert.throws(\n        () => writer.writeUInt(-1, 1),\n        'UInt must be positive'\n      )\n    })\n\n    it('when asked to write a non-integer, should throw', function () {\n      const writer = new Writer()\n\n      assert.throws(\n        () => writer.writeUInt(false as any, 1),\n        'UInt must be an integer'\n      )\n    })\n  })\n\n  describe('writeInt', function () {\n    it('when writing a zero byte integer, should throw', function () {\n      const writer = new Writer()\n\n      assert.throws(\n        () => writer.writeInt(0, 0),\n        'Int length must be greater than zero'\n      )\n    })\n\n    it('should write a one byte integer zero', function () {\n      const writer = new Writer()\n\n      writer.writeInt(0, 1)\n\n      assert.equal(writer.getBuffer().toString('hex'), '00')\n    })\n\n    it('should write a one byte integer one', function () {\n      const writer = new Writer()\n\n      writer.writeInt(1, 1)\n\n      assert.equal(writer.getBuffer().toString('hex'), '01')\n    })\n\n    it('should write a one byte integer minus one', function () {\n      const writer = new Writer()\n\n      writer.writeInt(-1, 1)\n\n      assert.equal(writer.getBuffer().toString('hex'), 'ff')\n    })\n\n    it('should write a two byte integer', function () {\n      const writer = new Writer()\n\n      writer.writeInt(258, 2)\n\n      assert.equal(writer.getBuffer().toString('hex'), '0102')\n    })\n\n    it('should write a negative two byte integer', function () {\n      const writer = new Writer()\n\n      writer.writeInt(-257, 2)\n\n      assert.equal(writer.getBuffer().toString('hex'), 'feff')\n    })\n\n    it('should write a small negative two byte integer', function () {\n      const writer = new Writer()\n\n      writer.writeInt(-2, 2)\n\n      assert.equal(writer.getBuffer().toString('hex'), 'fffe')\n    })\n\n    it('when asked to write an integer that does not fit, should throw', function () {\n      const writer = new Writer()\n\n      assert.throws(\n        () => writer.writeInt(256, 1),\n        'Int 256 does not fit in 1 bytes'\n      )\n    })\n\n    it('when asked to write a negative integer that does not fit, should throw', function () {\n      const writer = new Writer()\n\n      assert.throws(\n        () => writer.writeInt(-257, 1),\n        'Int -257 does not fit in 1 bytes'\n      )\n    })\n\n    it('when asked to write an integer above safe JavaScript range, should throw', function () {\n      const writer = new Writer()\n\n      assert.throws(\n        () => writer.writeInt(Number.MAX_SAFE_INTEGER + 1, 1),\n        'Int is larger than safe JavaScript range'\n      )\n    })\n\n    it('when asked to write an integer above safe JavaScript range, should throw', function () {\n      const writer = new Writer()\n\n      assert.throws(\n        () => writer.writeInt(Number.MIN_SAFE_INTEGER - 1, 1),\n        'Int is smaller than safe JavaScript range'\n      )\n    })\n\n    it('when asked to write a non-integer, should throw', function () {\n      const writer = new Writer()\n\n      assert.throws(\n        () => writer.writeInt(false as any, 1),\n        'Int must be an integer'\n      )\n    })\n  })\n\n  describe('writeVarUInt', function () {\n    it('should write a zero', function () {\n      const writer = new Writer()\n\n      writer.writeVarUInt(0)\n\n      assert.equal(writer.getBuffer().toString('hex'), '0100')\n    })\n\n    it('should write a one-byte integer', function () {\n      const writer = new Writer()\n\n      writer.writeVarUInt(16)\n\n      assert.equal(writer.getBuffer().toString('hex'), '0110')\n    })\n\n    it('should write a two-byte integer', function () {\n      const writer = new Writer()\n\n      writer.writeVarUInt(259)\n\n      assert.equal(writer.getBuffer().toString('hex'), '020103')\n    })\n\n    it('should write a four-byte integer', function () {\n      const writer = new Writer()\n\n      writer.writeVarUInt(0x01020305)\n\n      assert.equal(writer.getBuffer().toString('hex'), '0401020305')\n    })\n\n    it('should write the largest possible number', function () {\n      const writer = new Writer()\n\n      writer.writeVarUInt(Number.MAX_SAFE_INTEGER)\n\n      assert.equal(writer.getBuffer().toString('hex'), '071fffffffffffff')\n    })\n\n    it('when trying to write an unsafe integer, should throw', function () {\n      const writer = new Writer()\n\n      assert.throws(\n        () => writer.writeVarUInt(Number.MAX_SAFE_INTEGER + 1),\n        'UInt is larger than safe JavaScript range'\n      )\n    })\n\n    it('when trying to write an eight-byte integer, should throw', function () {\n      const writer = new Writer()\n\n      assert.throws(\n        () => writer.writeVarUInt(0x0100000000000000),\n        'UInt is larger than safe JavaScript range'\n      )\n    })\n\n    it('when trying to write a negative integer, should throw', function () {\n      const writer = new Writer()\n\n      assert.throws(\n        () => writer.writeVarUInt(-1),\n        'UInt must be positive'\n      )\n    })\n\n    it('when trying to write a non-integer, should throw', function () {\n      const writer = new Writer()\n\n      assert.throws(\n        () => writer.writeVarUInt(false as any),\n        'UInt must be an integer'\n      )\n    })\n\n    it('should accept a buffer to write', function () {\n      const writer = new Writer()\n\n      writer.writeVarUInt(new Buffer('010203040506070810', 'hex'))\n\n      assert.equal(writer.getBuffer().toString('hex'), '09010203040506070810')\n    })\n  })\n\n  describe('writeVarInt', function () {\n    it('should write a zero', function () {\n      const writer = new Writer()\n\n      writer.writeVarInt(0)\n\n      assert.equal(writer.getBuffer().toString('hex'), '0100')\n    })\n\n    it('should write a one-byte integer zero', function () {\n      const writer = new Writer()\n\n      writer.writeVarInt(0)\n\n      assert.equal(writer.getBuffer().toString('hex'), '0100')\n    })\n\n    it('should write a one-byte integer one', function () {\n      const writer = new Writer()\n\n      writer.writeVarInt(1)\n\n      assert.equal(writer.getBuffer().toString('hex'), '0101')\n    })\n\n    it('should write a one-byte integer minus one', function () {\n      const writer = new Writer()\n\n      writer.writeVarInt(-1)\n\n      assert.equal(writer.getBuffer().toString('hex'), '01ff')\n    })\n\n    it('should write a two-byte integer', function () {\n      const writer = new Writer()\n\n      writer.writeVarInt(259)\n\n      assert.equal(writer.getBuffer().toString('hex'), '020103')\n    })\n\n    it('should write a four-byte integer', function () {\n      const writer = new Writer()\n\n      writer.writeVarInt(0x01020305)\n\n      assert.equal(writer.getBuffer().toString('hex'), '0401020305')\n    })\n\n    it('should write the largest possible number', function () {\n      const writer = new Writer()\n\n      writer.writeVarInt(Number.MAX_SAFE_INTEGER)\n\n      assert.equal(writer.getBuffer().toString('hex'), '071fffffffffffff')\n    })\n\n    it('when trying to write an unsafe integer, should throw', function () {\n      const writer = new Writer()\n\n      assert.throws(\n        () => writer.writeVarInt(Number.MAX_SAFE_INTEGER + 1),\n        'Int is larger than safe JavaScript range'\n      )\n    })\n\n    it('when trying to write an unsafe negative integer, should throw', function () {\n      const writer = new Writer()\n\n      assert.throws(\n        () => writer.writeVarInt(Number.MIN_SAFE_INTEGER - 1),\n        'Int is smaller than safe JavaScript range'\n      )\n    })\n\n    it('when trying to write an eight-byte integer, should throw', function () {\n      const writer = new Writer()\n\n      assert.throws(\n        () => writer.writeVarInt(0x0100000000000000),\n        'Int is larger than safe JavaScript range'\n      )\n    })\n\n    it('when trying to write a non-integer, should throw', function () {\n      const writer = new Writer()\n\n      assert.throws(\n        () => writer.writeVarInt(false as any),\n        'Int must be an integer'\n      )\n    })\n\n    it('should accept a buffer to write', function () {\n      const writer = new Writer()\n\n      writer.writeVarInt(new Buffer('010203040506070810', 'hex'))\n\n      assert.equal(writer.getBuffer().toString('hex'), '09010203040506070810')\n    })\n  })\n\n  describe('writeOctetString', function () {\n    it('should write an empty octet string', function () {\n      const writer = new Writer()\n\n      writer.writeOctetString(new Buffer(0), 0)\n\n      assert.equal(writer.getBuffer().toString('hex'), '')\n    })\n\n    it('should write an octet string of length 1', function () {\n      const writer = new Writer()\n\n      writer.writeOctetString(new Buffer('02', 'hex'), 1)\n\n      assert.equal(writer.getBuffer().toString('hex'), '02')\n    })\n\n    it('should write an octet string of length 256', function () {\n      const writer = new Writer()\n\n      const buffer = new Buffer(256)\n      buffer.fill(0xb0)\n      writer.writeOctetString(buffer, 256)\n      const result = writer.getBuffer()\n\n      assert.equal(result.length, 256)\n      assert.equal(result.toString('hex'), buffer.toString('hex'))\n    })\n\n    it('when writing an octet string of the wrong length, should throw', function () {\n      const writer = new Writer()\n\n      assert.throws(\n        () => writer.writeOctetString(new Buffer('02', 'hex'), 2),\n        'Incorrect length for octet string (actual: 1, expected: 2)'\n      )\n    })\n  })\n\n  describe('writeVarOctetString', function () {\n    it('should write an empty buffer', function () {\n      const writer = new Writer()\n\n      writer.writeVarOctetString(new Buffer(0))\n\n      assert.equal(writer.getBuffer().toString('hex'), '00')\n    })\n\n    it('should write a buffer of length 1', function () {\n      const writer = new Writer()\n\n      writer.writeVarOctetString(new Buffer('b0', 'hex'))\n\n      assert.equal(writer.getBuffer().toString('hex'), '01b0')\n    })\n\n    it('should write a buffer of length 256', function () {\n      const writer = new Writer()\n\n      const buffer = new Buffer(256)\n      buffer.fill(0xb0)\n      writer.writeVarOctetString(buffer)\n      const result = writer.getBuffer()\n\n      assert.equal(result.length, 259)\n      assert.equal(result.toString('hex'), '820100' + buffer.toString('hex'))\n    })\n\n    it('when writing a non-buffer, should throw', function () {\n      const writer = new Writer()\n\n      assert.throws(\n        () => writer.writeVarOctetString(false as any),\n        'Expects a buffer'\n      )\n    })\n  })\n\n  describe('write', function () {\n    it('should write an empty octet string', function () {\n      const writer = new Writer()\n\n      writer.write(new Buffer(0))\n\n      assert.equal(writer.getBuffer().toString('hex'), '')\n    })\n\n    it('should write an octet string of length 1', function () {\n      const writer = new Writer()\n\n      writer.write(new Buffer('02', 'hex'))\n\n      assert.equal(writer.getBuffer().toString('hex'), '02')\n    })\n\n    it('should write an octet string of length 256', function () {\n      const writer = new Writer()\n\n      const buffer = new Buffer(256)\n      buffer.fill(0xb0)\n      writer.write(buffer)\n      const result = writer.getBuffer()\n\n      assert.equal(result.length, 256)\n      assert.equal(result.toString('hex'), buffer.toString('hex'))\n    })\n  })\n\n  describe('getBuffer', function () {\n    it('should return the writer output', function () {\n      const writer = new Writer()\n\n      writer.writeVarUInt(256)\n      const output = writer.getBuffer()\n\n      assert.isTrue(Buffer.isBuffer(output))\n      assert.equal(output.toString('hex'), '020100')\n    })\n\n    it('should return a new Buffer each time', function () {\n      const writer = new Writer()\n\n      writer.writeVarUInt(256)\n      const output1 = writer.getBuffer()\n      const output2 = writer.getBuffer()\n\n      assert.isTrue(Buffer.isBuffer(output1))\n      assert.isTrue(Buffer.isBuffer(output2))\n      assert.equal(output1.toString('hex'), '020100')\n      assert.equal(output2.toString('hex'), '020100')\n      assert.notEqual(output1, output2)\n    })\n  })\n\n  describe('writeUInt8', function () {\n    it('should write an 8-bit integer', function () {\n      const writer = new Writer()\n\n      writer.writeUInt8(0xff)\n\n      assert.equal(writer.getBuffer().toString('hex'), 'ff')\n    })\n  })\n\n  describe('writeUInt16', function () {\n    it('should write an 16-bit integer', function () {\n      const writer = new Writer()\n\n      writer.writeUInt16(0xff02)\n\n      assert.equal(writer.getBuffer().toString('hex'), 'ff02')\n    })\n  })\n\n  describe('writeUInt32', function () {\n    it('should write an 32-bit integer', function () {\n      const writer = new Writer()\n\n      writer.writeUInt32(0xff020304)\n\n      assert.equal(writer.getBuffer().toString('hex'), 'ff020304')\n    })\n  })\n\n  describe('writeInt8', function () {\n    it('should write an 8-bit integer', function () {\n      const writer = new Writer()\n\n      writer.writeInt8(0x7f)\n\n      assert.equal(writer.getBuffer().toString('hex'), '7f')\n    })\n\n    it('should write a negative 8-bit integer', function () {\n      const writer = new Writer()\n\n      writer.writeInt8(-0x80)\n\n      assert.equal(writer.getBuffer().toString('hex'), '80')\n    })\n  })\n\n  describe('writeInt16', function () {\n    it('should write an 16-bit integer', function () {\n      const writer = new Writer()\n\n      writer.writeInt16(0x7f02)\n\n      assert.equal(writer.getBuffer().toString('hex'), '7f02')\n    })\n\n    it('should write an 16-bit integer', function () {\n      const writer = new Writer()\n\n      writer.writeInt16(-0x7f50)\n\n      assert.equal(writer.getBuffer().toString('hex'), '80b0')\n    })\n  })\n\n  describe('writeInt32', function () {\n    it('should write an 32-bit integer', function () {\n      const writer = new Writer()\n\n      writer.writeInt32(0x7f020304)\n\n      assert.equal(writer.getBuffer().toString('hex'), '7f020304')\n    })\n\n    it('should write a negative 32-bit integer', function () {\n      const writer = new Writer()\n\n      writer.writeInt32(-0x7f020304)\n\n      assert.equal(writer.getBuffer().toString('hex'), '80fdfcfc')\n    })\n  })\n\n  describe('writeUInt64', function () {\n    it('should write an 64-bit integer', function () {\n      const writer = new Writer()\n\n      writer.writeUInt64([0xff020304, 0x05060708])\n\n      assert.equal(writer.getBuffer().toString('hex'), 'ff02030405060708')\n    })\n\n    it('should write an integer that is not formatted as an array', function () {\n      const writer = new Writer()\n\n      writer.writeUInt64(0xff0203040506)\n\n      assert.equal(writer.getBuffer().toString('hex'), '0000ff0203040506')\n    })\n\n    it('when writing an unsafe integer, should throw', function () {\n      const writer = new Writer()\n\n      assert.throws(\n        () => writer.writeUInt64(Number.MAX_SAFE_INTEGER + 1),\n        'Expected 64-bit integer as an array of two 32-bit words'\n      )\n    })\n  })\n})\n"]}
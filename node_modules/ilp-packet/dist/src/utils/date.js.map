{"version":3,"file":"date.js","sourceRoot":"","sources":["../../../src/utils/date.ts"],"names":[],"mappings":";;AAUa,QAAA,qBAAqB,GAAG,UAAC,IAAU;IAC9C,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAA;AAClD,CAAC,CAAA;AAEY,QAAA,sBAAsB,GACjC,2EAA2E,CAAA;AAEhE,QAAA,qBAAqB,GAAG,UAAC,eAAuB;IAC3D,IAAM,YAAY,GAAG,eAAe,CAAC,OAAO,CAC1C,8BAAsB,EACtB,mBAAmB,CACpB,CAAA;IAED,IAAM,IAAI,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,CAAA;IAEnC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAA;IACjC,CAAC;IAED,MAAM,CAAC,IAAI,CAAA;AACb,CAAC,CAAA","sourcesContent":["import padStart = require('lodash/padStart')\n\n// The OER encoding for GeneralizedTime is a variable length octet string\n// containing the ASCII/IA5 representation of a ISO8601 combined date and time\n// in the *basic* format without the \"T\" separator.\n//\n// This is a very roundabout way of saying that GeneralizedTime contains an\n// ISO 8601 timestamp, but compared to JavaScript, we need to take out the\n// hyphens (\"-\"), colons (\":\") and the \"T\".\n\nexport const dateToGeneralizedTime = (date: Date) => {\n  return date.toISOString().replace(/[\\-T:]/g, '')\n}\n\nexport const GENERALIZED_TIME_REGEX =\n  /^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2}\\.[0-9]{3}Z)$/\n\nexport const generalizedTimeToDate = (generalizedTime: string) => {\n  const isoTimestamp = generalizedTime.replace(\n    GENERALIZED_TIME_REGEX,\n    '$1-$2-$3T$4:$5:$6'\n  )\n\n  const date = new Date(isoTimestamp)\n\n  if (!date.valueOf()) {\n    throw new Error('invalid date')\n  }\n\n  return date\n}\n"]}
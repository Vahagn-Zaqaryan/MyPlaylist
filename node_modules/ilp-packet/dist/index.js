"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var oer_utils_1 = require("oer-utils");
var date_1 = require("./src/utils/date");
var uint64_1 = require("./src/utils/uint64");
var base64url_adhoc_1 = require("base64url-adhoc");
var Long = require("long");
var times = require("lodash/times");
var Type;
(function (Type) {
    Type[Type["TYPE_ILP_PAYMENT"] = 1] = "TYPE_ILP_PAYMENT";
    Type[Type["TYPE_ILQP_LIQUIDITY_REQUEST"] = 2] = "TYPE_ILQP_LIQUIDITY_REQUEST";
    Type[Type["TYPE_ILQP_LIQUIDITY_RESPONSE"] = 3] = "TYPE_ILQP_LIQUIDITY_RESPONSE";
    Type[Type["TYPE_ILQP_BY_SOURCE_REQUEST"] = 4] = "TYPE_ILQP_BY_SOURCE_REQUEST";
    Type[Type["TYPE_ILQP_BY_SOURCE_RESPONSE"] = 5] = "TYPE_ILQP_BY_SOURCE_RESPONSE";
    Type[Type["TYPE_ILQP_BY_DESTINATION_REQUEST"] = 6] = "TYPE_ILQP_BY_DESTINATION_REQUEST";
    Type[Type["TYPE_ILQP_BY_DESTINATION_RESPONSE"] = 7] = "TYPE_ILQP_BY_DESTINATION_RESPONSE";
    Type[Type["TYPE_ILP_ERROR"] = 8] = "TYPE_ILP_ERROR";
})(Type || (Type = {}));
var serializeEnvelope = function (type, contents) {
    var writer = new oer_utils_1.Writer();
    writer.writeUInt8(type);
    writer.writeVarOctetString(contents);
    return writer.getBuffer();
};
var deserializeEnvelope = function (binary) {
    var envelopeReader = oer_utils_1.Reader.from(binary);
    var type = envelopeReader.readUInt8();
    var contents = envelopeReader.readVarOctetString();
    return { type: type, contents: contents };
};
var serializeIlpPayment = function (json) {
    var writer = new oer_utils_1.Writer();
    var amount = Long.fromString(json.amount, true);
    writer.writeUInt32(amount.getHighBitsUnsigned());
    writer.writeUInt32(amount.getLowBitsUnsigned());
    writer.writeVarOctetString(Buffer.from(json.account, 'ascii'));
    writer.writeVarOctetString(Buffer.from(json.data || '', 'base64'));
    writer.writeUInt8(0);
    return serializeEnvelope(Type.TYPE_ILP_PAYMENT, writer.getBuffer());
};
var deserializeIlpPayment = function (binary) {
    var _a = deserializeEnvelope(binary), type = _a.type, contents = _a.contents;
    if (type !== Type.TYPE_ILP_PAYMENT) {
        throw new Error('Packet has incorrect type');
    }
    var reader = oer_utils_1.Reader.from(contents);
    var highBits = reader.readUInt32();
    var lowBits = reader.readUInt32();
    var amount = Long.fromBits(lowBits, highBits, true).toString();
    var account = reader.readVarOctetString().toString('ascii');
    var data = base64url_adhoc_1.default(reader.readVarOctetString());
    return {
        amount: amount,
        account: account,
        data: data
    };
};
var serializeIlqpLiquidityRequest = function (json) {
    var writer = new oer_utils_1.Writer();
    writer.writeVarOctetString(Buffer.from(json.destinationAccount, 'ascii'));
    writer.writeUInt32(json.destinationHoldDuration);
    writer.writeUInt8(0);
    return serializeEnvelope(Type.TYPE_ILQP_LIQUIDITY_REQUEST, writer.getBuffer());
};
var deserializeIlqpLiquidityRequest = function (binary) {
    var _a = deserializeEnvelope(binary), type = _a.type, contents = _a.contents;
    if (type !== Type.TYPE_ILQP_LIQUIDITY_REQUEST) {
        throw new Error('Packet has incorrect type');
    }
    var reader = oer_utils_1.Reader.from(contents);
    var destinationAccount = reader.readVarOctetString().toString('ascii');
    var destinationHoldDuration = reader.readUInt32();
    return {
        destinationAccount: destinationAccount,
        destinationHoldDuration: destinationHoldDuration
    };
};
var SIZE_OF_POINT = 16;
var serializeIlqpLiquidityResponse = function (json) {
    var writer = new oer_utils_1.Writer();
    if (json.liquidityCurve.length % SIZE_OF_POINT !== 0) {
        throw new Error('invalid liquidity curve, length must be multiple of ' +
            SIZE_OF_POINT + ', but was: ' +
            json.liquidityCurve.length);
    }
    writer.writeVarUInt(json.liquidityCurve.length / SIZE_OF_POINT);
    writer.write(json.liquidityCurve);
    writer.writeVarOctetString(Buffer.from(json.appliesToPrefix, 'ascii'));
    writer.writeUInt32(json.sourceHoldDuration);
    writer.writeVarOctetString(Buffer.from(date_1.dateToGeneralizedTime(json.expiresAt), 'ascii'));
    writer.writeUInt8(0);
    return serializeEnvelope(Type.TYPE_ILQP_LIQUIDITY_RESPONSE, writer.getBuffer());
};
var deserializeIlqpLiquidityResponse = function (binary) {
    var _a = deserializeEnvelope(binary), type = _a.type, contents = _a.contents;
    if (type !== Type.TYPE_ILQP_LIQUIDITY_RESPONSE) {
        throw new Error('Packet has incorrect type');
    }
    var reader = oer_utils_1.Reader.from(contents);
    var numPoints = reader.readVarUInt();
    var liquidityCurve = reader.read(numPoints * SIZE_OF_POINT);
    var appliesToPrefix = reader.readVarOctetString().toString('ascii');
    var sourceHoldDuration = reader.readUInt32();
    var expiresAt = date_1.generalizedTimeToDate(reader.readVarOctetString().toString('ascii'));
    return {
        liquidityCurve: liquidityCurve,
        appliesToPrefix: appliesToPrefix,
        sourceHoldDuration: sourceHoldDuration,
        expiresAt: expiresAt
    };
};
var serializeIlqpBySourceRequest = function (json) {
    var writer = new oer_utils_1.Writer();
    writer.writeVarOctetString(Buffer.from(json.destinationAccount, 'ascii'));
    writer.writeUInt64(uint64_1.stringToTwoNumbers(json.sourceAmount));
    writer.writeUInt32(json.destinationHoldDuration);
    writer.writeUInt8(0);
    return serializeEnvelope(Type.TYPE_ILQP_BY_SOURCE_REQUEST, writer.getBuffer());
};
var deserializeIlqpBySourceRequest = function (binary) {
    var _a = deserializeEnvelope(binary), type = _a.type, contents = _a.contents;
    if (type !== Type.TYPE_ILQP_BY_SOURCE_REQUEST) {
        throw new Error('Packet has incorrect type');
    }
    var reader = oer_utils_1.Reader.from(contents);
    var destinationAccount = reader.readVarOctetString().toString('ascii');
    var sourceAmount = uint64_1.twoNumbersToString(reader.readUInt64());
    var destinationHoldDuration = reader.readUInt32();
    return {
        destinationAccount: destinationAccount,
        sourceAmount: sourceAmount,
        destinationHoldDuration: destinationHoldDuration
    };
};
var serializeIlqpBySourceResponse = function (json) {
    var writer = new oer_utils_1.Writer();
    writer.writeUInt64(uint64_1.stringToTwoNumbers(json.destinationAmount));
    writer.writeUInt32(json.sourceHoldDuration);
    writer.writeUInt8(0);
    return serializeEnvelope(Type.TYPE_ILQP_BY_SOURCE_RESPONSE, writer.getBuffer());
};
var deserializeIlqpBySourceResponse = function (binary) {
    var _a = deserializeEnvelope(binary), type = _a.type, contents = _a.contents;
    if (type !== Type.TYPE_ILQP_BY_SOURCE_RESPONSE) {
        throw new Error('Packet has incorrect type');
    }
    var reader = oer_utils_1.Reader.from(contents);
    var destinationAmount = uint64_1.twoNumbersToString(reader.readUInt64());
    var sourceHoldDuration = reader.readUInt32();
    return {
        destinationAmount: destinationAmount,
        sourceHoldDuration: sourceHoldDuration
    };
};
var serializeIlqpByDestinationRequest = function (json) {
    var writer = new oer_utils_1.Writer();
    writer.writeVarOctetString(Buffer.from(json.destinationAccount, 'ascii'));
    writer.writeUInt64(uint64_1.stringToTwoNumbers(json.destinationAmount));
    writer.writeUInt32(json.destinationHoldDuration);
    writer.writeUInt8(0);
    return serializeEnvelope(Type.TYPE_ILQP_BY_DESTINATION_REQUEST, writer.getBuffer());
};
var deserializeIlqpByDestinationRequest = function (binary) {
    var _a = deserializeEnvelope(binary), type = _a.type, contents = _a.contents;
    if (type !== Type.TYPE_ILQP_BY_DESTINATION_REQUEST) {
        throw new Error('Packet has incorrect type');
    }
    var reader = oer_utils_1.Reader.from(contents);
    var destinationAccount = reader.readVarOctetString().toString('ascii');
    var destinationAmount = uint64_1.twoNumbersToString(reader.readUInt64());
    var destinationHoldDuration = reader.readUInt32();
    return {
        destinationAccount: destinationAccount,
        destinationAmount: destinationAmount,
        destinationHoldDuration: destinationHoldDuration
    };
};
var serializeIlqpByDestinationResponse = function (json) {
    var writer = new oer_utils_1.Writer();
    writer.writeUInt64(uint64_1.stringToTwoNumbers(json.sourceAmount));
    writer.writeUInt32(json.sourceHoldDuration);
    writer.writeUInt8(0);
    return serializeEnvelope(Type.TYPE_ILQP_BY_DESTINATION_RESPONSE, writer.getBuffer());
};
var deserializeIlqpByDestinationResponse = function (binary) {
    var _a = deserializeEnvelope(binary), type = _a.type, contents = _a.contents;
    if (type !== Type.TYPE_ILQP_BY_DESTINATION_RESPONSE) {
        throw new Error('Packet has incorrect type');
    }
    var reader = oer_utils_1.Reader.from(contents);
    var sourceAmount = uint64_1.twoNumbersToString(reader.readUInt64());
    var sourceHoldDuration = reader.readUInt32();
    return {
        sourceAmount: sourceAmount,
        sourceHoldDuration: sourceHoldDuration
    };
};
var ILP_ERROR_CODE_LENGTH = 3;
var serializeIlpError = function (json) {
    var writer = new oer_utils_1.Writer();
    var codeBuffer = Buffer.from(json.code, 'ascii');
    if (codeBuffer.length !== ILP_ERROR_CODE_LENGTH) {
        throw new Error('ILP error codes must be three bytes long, received: ' + json.code);
    }
    writer.write(codeBuffer);
    writer.writeVarOctetString(Buffer.from(json.name, 'ascii'));
    writer.writeVarOctetString(Buffer.from(json.triggeredBy, 'ascii'));
    writer.writeVarUInt(json.forwardedBy.length);
    json.forwardedBy.forEach(function (forwardedBy) {
        writer.writeVarOctetString(Buffer.from(forwardedBy, 'ascii'));
    });
    writer.writeVarOctetString(Buffer.from(date_1.dateToGeneralizedTime(json.triggeredAt), 'ascii'));
    writer.writeVarOctetString(Buffer.from(json.data, 'ascii'));
    writer.writeUInt8(0);
    return serializeEnvelope(Type.TYPE_ILP_ERROR, writer.getBuffer());
};
var deserializeIlpError = function (binary) {
    var _a = deserializeEnvelope(binary), type = _a.type, contents = _a.contents;
    if (type !== Type.TYPE_ILP_ERROR) {
        throw new Error('Packet has incorrect type');
    }
    var reader = oer_utils_1.Reader.from(contents);
    var code = reader.read(ILP_ERROR_CODE_LENGTH).toString('ascii');
    var name = reader.readVarOctetString().toString('ascii');
    var triggeredBy = reader.readVarOctetString().toString('ascii');
    var forwardedBy = times(reader.readVarUInt()).map(function () {
        return reader.readVarOctetString().toString('ascii');
    });
    var triggeredAt = date_1.generalizedTimeToDate(reader.readVarOctetString().toString('ascii'));
    var data = reader.readVarOctetString().toString('ascii');
    return {
        code: code,
        name: name,
        triggeredBy: triggeredBy,
        forwardedBy: forwardedBy,
        triggeredAt: triggeredAt,
        data: data
    };
};
module.exports = {
    Type: Type,
    serializeIlpPayment: serializeIlpPayment,
    deserializeIlpPayment: deserializeIlpPayment,
    serializeIlqpLiquidityRequest: serializeIlqpLiquidityRequest,
    deserializeIlqpLiquidityRequest: deserializeIlqpLiquidityRequest,
    serializeIlqpLiquidityResponse: serializeIlqpLiquidityResponse,
    deserializeIlqpLiquidityResponse: deserializeIlqpLiquidityResponse,
    serializeIlqpBySourceRequest: serializeIlqpBySourceRequest,
    deserializeIlqpBySourceRequest: deserializeIlqpBySourceRequest,
    serializeIlqpBySourceResponse: serializeIlqpBySourceResponse,
    deserializeIlqpBySourceResponse: deserializeIlqpBySourceResponse,
    serializeIlqpByDestinationRequest: serializeIlqpByDestinationRequest,
    deserializeIlqpByDestinationRequest: deserializeIlqpByDestinationRequest,
    serializeIlqpByDestinationResponse: serializeIlqpByDestinationResponse,
    deserializeIlqpByDestinationResponse: deserializeIlqpByDestinationResponse,
    serializeIlpError: serializeIlpError,
    deserializeIlpError: deserializeIlpError
};
//# sourceMappingURL=index.js.map
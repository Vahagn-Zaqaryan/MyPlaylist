{"version":3,"file":"base-error.js","sourceRoot":"","sources":["../../../src/errors/base-error.ts"],"names":[],"mappings":";;;;;;;;;;;;AAiBA;IAAwB,6BAAK;IAC3B,mBAAa,OAAoB;QAApB,wBAAA,EAAA,YAAoB;QAAjC,YACE,iBAAO,SAoBR;QAjBC,MAAM,CAAC,cAAc,CAAC,KAAI,EAAE,SAAS,EAAE;YACrC,YAAY,EAAE,IAAI;YAClB,UAAU,EAAE,KAAK;YACjB,KAAK,EAAE,OAAO;SACf,CAAC,CAAA;QAGF,MAAM,CAAC,cAAc,CAAC,KAAI,EAAE,MAAM,EAAE;YAClC,YAAY,EAAE,IAAI;YAClB,UAAU,EAAE,KAAK;YACjB,KAAK,EAAE,KAAI,CAAC,WAAW,CAAC,IAAI;SAC7B,CAAC,CAAA;QAGF,EAAE,CAAC,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAC5B,KAAK,CAAC,iBAAiB,CAAC,KAAI,EAAE,KAAI,CAAC,WAAW,CAAC,CAAA;QACjD,CAAC;;IACH,CAAC;IACH,gBAAC;AAAD,CAAC,AAvBD,CAAwB,KAAK,GAuB5B;AAED,kBAAe,SAAS,CAAA","sourcesContent":["/**\n * @module util\n */\n\n/**\n * Extensible error class.\n *\n * The built-in Error class is not actually a constructor, but a factory. It\n * doesn't operate on `this`, so if we call it as `super()` it doesn't do\n * anything useful.\n *\n * Nonetheless it does create objects that are instanceof Error. In order to\n * easily subclass error we need our own base class which mimics that behavior\n * but with a true constructor.\n *\n * Note that this code is specific to V8 (due to `Error.captureStackTrace`).\n */\nclass BaseError extends Error {\n  constructor (message: string = '') {\n    super()\n\n    // Set this.message\n    Object.defineProperty(this, 'message', {\n      configurable: true,\n      enumerable: false,\n      value: message\n    })\n\n    // Set this.name\n    Object.defineProperty(this, 'name', {\n      configurable: true,\n      enumerable: false,\n      value: this.constructor.name\n    })\n\n    // Set this.stack\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor)\n    }\n  }\n}\n\nexport default BaseError\n"]}
{"version":3,"file":"predictor.spec.js","sourceRoot":"","sources":["../../test/predictor.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import Predictor from '../src/lib/predictor'\n\nimport chai = require('chai')\nconst assert = chai.assert\n\ndescribe('Predictor', function () {\n  describe('constructor', function () {\n    it('should create a Predictor', function () {\n      const predictor = new Predictor()\n\n      assert.instanceOf(predictor, Predictor)\n    })\n  })\n\n  describe('writeUInt', function () {\n    it('should increment by the length of the unsigned integer', function () {\n      const predictor = new Predictor()\n\n      predictor.writeUInt(0, 1)\n\n      assert.equal(predictor.getSize(), 1)\n    })\n\n    it('should increment multiple times for multiple integers', function () {\n      const predictor = new Predictor()\n\n      predictor.writeUInt(0, 1)\n      predictor.writeUInt(0, 4)\n\n      assert.equal(predictor.getSize(), 5)\n    })\n  })\n\n  describe('writeVarUInt', function () {\n    it('should accept a buffer and add the correct size', function () {\n      const predictor = new Predictor()\n\n      predictor.writeVarUInt(new Buffer(10))\n\n      assert.equal(predictor.getSize(), 11)\n    })\n\n    it('should accept zero and add 2 bytes to the size', function () {\n      const predictor = new Predictor()\n\n      predictor.writeVarUInt(0)\n\n      assert.equal(predictor.getSize(), 2)\n    })\n\n    it('should accept 0x01020304 and add 5 bytes to the size', function () {\n      const predictor = new Predictor()\n\n      predictor.writeVarUInt(0x01020304)\n\n      assert.equal(predictor.getSize(), 5)\n    })\n\n    it('should accept MAX_SAFE_INTEGER and add 8 bytes to the size', function () {\n      const predictor = new Predictor()\n\n      predictor.writeVarUInt(Number.MAX_SAFE_INTEGER)\n\n      assert.equal(predictor.getSize(), 8)\n    })\n\n    it('when writing a non-integer, should throw', function () {\n      const predictor = new Predictor()\n\n      assert.throws(\n        () => predictor.writeVarUInt(0.5),\n        'UInt must be an integer'\n      )\n    })\n\n    it('when writing a negative integer, should throw', function () {\n      const predictor = new Predictor()\n\n      assert.throws(\n        () => predictor.writeVarUInt(-1),\n        'UInt must be positive'\n      )\n    })\n  })\n\n  describe('writeOctetString', function () {\n    it('should increment by the given length of the octet string', function () {\n      const predictor = new Predictor()\n\n      predictor.writeOctetString(new Buffer(10), 5)\n\n      assert.equal(predictor.getSize(), 5)\n    })\n  })\n\n  describe('writeVarOctetString', function () {\n    it('should calculate the correct length for an empty buffer', function () {\n      const predictor = new Predictor()\n\n      predictor.writeVarOctetString(new Buffer(0))\n\n      assert.equal(predictor.getSize(), 1)\n    })\n\n    it('should calculate the correct length for a short buffer', function () {\n      const predictor = new Predictor()\n\n      predictor.writeVarOctetString(new Buffer(10))\n\n      assert.equal(predictor.getSize(), 11)\n    })\n\n    it('should calculate the correct length for a long buffer', function () {\n      const predictor = new Predictor()\n\n      predictor.writeVarOctetString(new Buffer(256))\n\n      assert.equal(predictor.getSize(), 259)\n    })\n  })\n\n  describe('write', function () {\n    it('should add the size of the buffer to the total size', function () {\n      const predictor = new Predictor()\n\n      predictor.write(new Buffer(15))\n\n      assert.equal(predictor.getSize(), 15)\n    })\n  })\n\n  describe('skip', function () {\n    it('should add the given number of bytes to the total size', function () {\n      const predictor = new Predictor()\n\n      predictor.skip(15)\n\n      assert.equal(predictor.getSize(), 15)\n    })\n  })\n\n  describe('writeUInt8', function () {\n    it('should add 1 byte to the size', function () {\n      const predictor = new Predictor()\n\n      predictor.writeUInt8(15)\n\n      assert.equal(predictor.getSize(), 1)\n    })\n  })\n\n  describe('writeUInt16', function () {\n    it('should add 1 byte to the size', function () {\n      const predictor = new Predictor()\n\n      predictor.writeUInt16(15)\n\n      assert.equal(predictor.getSize(), 2)\n    })\n  })\n\n  describe('writeUInt32', function () {\n    it('should add 1 byte to the size', function () {\n      const predictor = new Predictor()\n\n      predictor.writeUInt32(15)\n\n      assert.equal(predictor.getSize(), 4)\n    })\n  })\n\n  describe('writeUInt64', function () {\n    it('should add 1 byte to the size', function () {\n      const predictor = new Predictor()\n\n      predictor.writeUInt64(15)\n\n      assert.equal(predictor.getSize(), 8)\n    })\n  })\n})\n"]}
{"version":3,"file":"writer.js","sourceRoot":"","sources":["../../../src/lib/writer.ts"],"names":[],"mappings":"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","sourcesContent":["import isInteger = require('core-js/library/fn/number/is-integer')\nimport MAX_SAFE_INTEGER = require('core-js/library/fn/number/max-safe-integer')\n\nclass Writer {\n  // Largest value that can be written as a variable-length unsigned integer\n  static MAX_SAFE_INTEGER = MAX_SAFE_INTEGER\n  static MIN_SAFE_INTEGER: number = require('core-js/library/fn/number/min-safe-integer')\n\n  static UINT_RANGES = {\n    1: 0xff,\n    2: 0xffff,\n    3: 0xffffff,\n    4: 0xffffffff,\n    5: 0xffffffffff,\n    6: 0xffffffffffff\n  }\n\n  static INT_RANGES = {\n    1: [-0x80, 0x7f],\n    2: [-0x8000, 0x7fff],\n    3: [-0x800000, 0x7fffff],\n    4: [-0x80000000, 0x7fffffff],\n    5: [-0x8000000000, 0x7fffffffff],\n    6: [-0x800000000000, 0x7fffffffffff]\n  }\n\n  components: Buffer[]\n\n  constructor () {\n    this.components = []\n  }\n\n  /**\n   * Write a fixed-length unsigned integer to the stream.\n   *\n   * @param {number} value Value to write. Must be in range for the given length.\n   * @param {number} length Number of bytes to encode this value as.\n   */\n  writeUInt (value: number, length: number) {\n    if (!isInteger(value)) {\n      throw new Error('UInt must be an integer')\n    } else if (value < 0) {\n      throw new Error('UInt must be positive')\n    } else if (length <= 0) {\n      throw new Error('UInt length must be greater than zero')\n    } else if (value > Writer.MAX_SAFE_INTEGER) {\n      throw new Error('UInt is larger than safe JavaScript range')\n    } else if (value > Writer.UINT_RANGES[length]) {\n      throw new Error('UInt ' + value + ' does not fit in ' + length + ' bytes')\n    }\n\n    const buffer = new Buffer(length)\n    buffer.writeUIntBE(value, 0, length)\n    this.write(buffer)\n  }\n\n  /**\n   * Write a fixed-length signed integer to the stream.\n   *\n   * @param {number} value Value to write. Must be in range for the given length.\n   * @param {number} length Number of bytes to encode this value as.\n   */\n  writeInt (value: number, length: number) {\n    if (!isInteger(value)) {\n      throw new Error('Int must be an integer')\n    } else if (length <= 0) {\n      throw new Error('Int length must be greater than zero')\n    } else if (value > Writer.MAX_SAFE_INTEGER) {\n      throw new Error('Int is larger than safe JavaScript range')\n    } else if (value < Writer.MIN_SAFE_INTEGER) {\n      throw new Error('Int is smaller than safe JavaScript range')\n    } else if (value < Writer.INT_RANGES[length][0]) {\n      throw new Error('Int ' + value + ' does not fit in ' + length + ' bytes')\n    } else if (value > Writer.INT_RANGES[length][1]) {\n      throw new Error('Int ' + value + ' does not fit in ' + length + ' bytes')\n    }\n\n    const buffer = new Buffer(length)\n    buffer.writeIntBE(value, 0, length)\n    this.write(buffer)\n  }\n\n  /**\n   * Write a variable length unsigned integer to the stream.\n   *\n   * We need to first turn the integer into a buffer in big endian order, then\n   * we write the buffer as an octet string.\n   *\n   * @param {number} value Integer to represent.\n   */\n  writeVarUInt (value: number | Buffer) {\n    if (Buffer.isBuffer(value)) {\n      // If the integer was already passed as a buffer, we can just treat it as\n      // an octet string.\n      this.writeVarOctetString(value)\n      return\n    } else if (!isInteger(value)) {\n      throw new Error('UInt must be an integer')\n    } else if (value < 0) {\n      throw new Error('UInt must be positive')\n    } else if (value > Writer.MAX_SAFE_INTEGER) {\n      throw new Error('UInt is larger than safe JavaScript range')\n    }\n\n    const lengthOfValue = Math.ceil(value.toString(2).length / 8)\n    const buffer = new Buffer(lengthOfValue)\n    buffer.writeUIntBE(value, 0, lengthOfValue)\n\n    this.writeVarOctetString(buffer)\n  }\n\n  /**\n   * Write a variable length signed integer to the stream.\n   *\n   * We need to first turn the integer into a buffer in big endian order, then\n   * we write the buffer as an octet string.\n   *\n   * @param {number} value Integer to represent.\n   */\n  writeVarInt (value: number | Buffer) {\n    if (Buffer.isBuffer(value)) {\n      // If the integer was already passed as a buffer, we can just treat it as\n      // an octet string.\n      this.writeVarOctetString(value)\n      return\n    } else if (!isInteger(value)) {\n      throw new Error('Int must be an integer')\n    } else if (value > Writer.MAX_SAFE_INTEGER) {\n      throw new Error('Int is larger than safe JavaScript range')\n    } else if (value < Writer.MIN_SAFE_INTEGER) {\n      throw new Error('Int is smaller than safe JavaScript range')\n    }\n\n    const lengthDeterminingValue = (value < 0) ? 1 - value : value\n    const lengthOfValue = Math.ceil((lengthDeterminingValue.toString(2).length + 1) / 8)\n    const buffer = new Buffer(lengthOfValue)\n    buffer.writeIntBE(value, 0, lengthOfValue)\n\n    this.writeVarOctetString(buffer)\n  }\n\n  /**\n   * Write a 64-bit unsigned integer.\n   *\n   * It is possible to pass a number to this method, however only if the number\n   * is guaranteed to be smaller than Number.MAX_SAFE_INTEGER.\n   *\n   * Alternatively, the number may be passed as an array of two 32-bit words,\n   * with the most significant word first.\n   *\n   * @param {number|number[]} A 64-bit integer as a number or of the form [high, low]\n   */\n  writeUInt64 (value: number | number[]) {\n    if (typeof value === 'number' && isInteger(value) && value <= Writer.MAX_SAFE_INTEGER) {\n      this.writeUInt32(Math.floor(value / 0x100000000))\n      this.writeUInt32(value & 0xffffffff)\n      return\n    } else if (!Array.isArray(value) || value.length !== 2 ||\n        !isInteger(value[0]) || !isInteger(value[1])) {\n      throw new TypeError('Expected 64-bit integer as an array of two 32-bit words')\n    }\n\n    this.writeUInt32(value[0])\n    this.writeUInt32(value[1])\n  }\n\n  /**\n   * Write a fixed-length octet string.\n   *\n   * Mostly just a raw write, but this method enforces the length of the\n   * provided buffer is correct.\n   *\n   * @param {Buffer} buffer Data to write.\n   * @param {number} length Length of data according to the format.\n   */\n  writeOctetString (buffer: Buffer, length: number) {\n    if (buffer.length !== length) {\n      throw new Error('Incorrect length for octet string (actual: ' +\n        buffer.length + ', expected: ' + length + ')')\n    }\n    this.write(buffer)\n  }\n\n  /**\n   * Write a variable-length octet string.\n   *\n   * A variable-length octet string is a length-prefixed set of arbitrary bytes.\n   *\n   * @param {Buffer} buffer Contents of the octet string.\n   */\n  writeVarOctetString (buffer: Buffer) {\n    if (!Buffer.isBuffer(buffer)) {\n      throw new TypeError('Expects a buffer')\n    }\n\n    const MSB = 0x80\n\n    if (buffer.length <= 127) {\n      // For buffers shorter than 128 bytes, we simply prefix the length as a\n      // single byte.\n      this.writeUInt8(buffer.length)\n    } else {\n      // For buffers longer than 128 bytes, we first write a single byte\n      // containing the length of the length in bytes, with the most significant\n      // bit set.\n      const lengthOfLength = Math.ceil(buffer.length.toString(2).length / 8)\n      this.writeUInt8(MSB | lengthOfLength)\n\n      // Then we write the length of the buffer in that many bytes.\n      this.writeUInt(buffer.length, lengthOfLength)\n    }\n\n    this.write(buffer)\n  }\n\n  /**\n   * Write a series of raw bytes.\n   *\n   * Adds the given bytes to the output buffer.\n   *\n   * @param {Buffer} buffer Bytes to write.\n   */\n  write (buffer: Buffer) {\n    this.components.push(buffer)\n  }\n\n  /**\n   * Return the resulting buffer.\n   *\n   * Returns the buffer containing the serialized data that was written using\n   * this writer.\n   *\n   * @return {Buffer} Result data.\n   */\n  getBuffer () {\n    // ST: The following debug statement is very useful, so I finally decided to\n    // commit it...\n    // console.log(this.components.map((x) => x.toString('hex')).join(' '))\n\n    return Buffer.concat(this.components)\n  }\n}\n\ninterface Writer {\n  writeUInt8 (value: number): undefined\n  writeUInt16 (value: number): undefined\n  writeUInt32 (value: number): undefined\n  writeInt8 (value: number): undefined\n  writeInt16 (value: number): undefined\n  writeInt32 (value: number): undefined\n}\n\n// Create write(U)Int{8,16,32} shortcuts\n;[1, 2, 4].forEach((bytes) => {\n  Writer.prototype['writeUInt' + bytes * 8] = function (value: number) {\n    this.writeUInt(value, bytes)\n  }\n\n  Writer.prototype['writeInt' + bytes * 8] = function (value: number) {\n    this.writeInt(value, bytes)\n  }\n})\n\nexport default Writer\n"]}
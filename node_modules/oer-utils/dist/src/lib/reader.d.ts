/// <reference types="node" />
declare class Reader {
    static HIGH_BIT: number;
    static LOWER_SEVEN_BITS: number;
    static MAX_INT_BYTES: number;
    buffer: Buffer;
    cursor: number;
    bookmarks: number[];
    constructor(buffer: Buffer);
    static from(source: Buffer | Reader): Reader;
    bookmark(): void;
    restore(): void;
    ensureAvailable(bytes: number): void;
    readUInt(length: number): number;
    peekUInt(length: number): number;
    skipUInt(length: number): void;
    readInt(length: number): number;
    peekInt(length: number): number;
    skipInt(length: number): void;
    readUInt64(): number[];
    peekUInt64(): number[];
    skipUInt64(): void;
    readVarUInt(): number;
    peekVarUInt(): number;
    skipVarUInt(): void;
    readVarInt(): number;
    peekVarInt(): number;
    skipVarInt(): void;
    readOctetString(length: number): Buffer;
    peekOctetString(length: number): Buffer;
    skipOctetString(length: number): void;
    readLengthPrefix(): number;
    readVarOctetString(): Buffer;
    peekVarOctetString(): Buffer;
    skipVarOctetString(): void;
    read(bytes: number): Buffer;
    peek(bytes: number): Buffer;
    skip(bytes: number): void;
}
interface Reader {
    readUInt8(): number;
    readUInt16(): number;
    readUInt32(): number;
    peekUInt8(): number;
    peekUInt16(): number;
    peekUInt32(): number;
    skipUInt8(): number;
    skipUInt16(): number;
    skipUInt32(): number;
    readInt8(): number;
    readInt16(): number;
    readInt32(): number;
    peekInt8(): number;
    peekInt16(): number;
    peekInt32(): number;
    skipInt8(): number;
    skipInt16(): number;
    skipInt32(): number;
}
export default Reader;

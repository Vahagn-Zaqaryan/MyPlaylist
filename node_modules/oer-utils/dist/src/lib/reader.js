"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var underflow_error_1 = require("../errors/underflow-error");
var parse_error_1 = require("../errors/parse-error");
var Reader = (function () {
    function Reader(buffer) {
        this.buffer = buffer;
        this.cursor = 0;
        this.bookmarks = [];
    }
    Reader.from = function (source) {
        if (Buffer.isBuffer(source)) {
            return new Reader(source);
        }
        else if (source instanceof Reader) {
            return new Reader(source.buffer.slice(source.cursor));
        }
        else {
            throw new Error('Reader must be given a Buffer');
        }
    };
    Reader.prototype.bookmark = function () {
        this.bookmarks.push(this.cursor);
    };
    Reader.prototype.restore = function () {
        if (!this.bookmarks.length) {
            throw new Error('Cannot restore bookmark when no bookmark set');
        }
        this.cursor = this.bookmarks.pop();
    };
    Reader.prototype.ensureAvailable = function (bytes) {
        if (this.buffer.length < (this.cursor + bytes)) {
            throw new underflow_error_1.default('Tried to read ' + bytes + ' bytes, but only ' +
                (this.buffer.length - this.cursor) + ' bytes available');
        }
    };
    Reader.prototype.readUInt = function (length) {
        var value = this.peekUInt(length);
        this.cursor += length;
        return value;
    };
    Reader.prototype.peekUInt = function (length) {
        if (length === 0) {
            return 0;
        }
        if (length < 0) {
            throw new Error('Tried to read integer with negative length (provided: ' +
                length + ')');
        }
        if (length > Reader.MAX_INT_BYTES) {
            throw new Error('Tried to read too large integer (requested: ' +
                length + ', max: ' + Reader.MAX_INT_BYTES + ')');
        }
        this.ensureAvailable(length);
        var value = this.buffer.readUIntBE(this.cursor, length);
        return value;
    };
    Reader.prototype.skipUInt = function (length) {
        this.skip(length);
    };
    Reader.prototype.readInt = function (length) {
        var value = this.peekInt(length);
        this.cursor += length;
        return value;
    };
    Reader.prototype.peekInt = function (length) {
        if (length === 0) {
            return 0;
        }
        if (length < 0) {
            throw new Error('Tried to read integer with negative length (provided: ' +
                length + ')');
        }
        if (length > Reader.MAX_INT_BYTES) {
            throw new Error('Tried to read too large integer (requested: ' +
                length + ', max: ' + Reader.MAX_INT_BYTES + ')');
        }
        this.ensureAvailable(length);
        var value = this.buffer.readIntBE(this.cursor, length);
        return value;
    };
    Reader.prototype.skipInt = function (length) {
        this.skip(length);
    };
    Reader.prototype.readUInt64 = function () {
        return [this.readUInt32(), this.readUInt32()];
    };
    Reader.prototype.peekUInt64 = function () {
        this.bookmark();
        var value = this.readUInt64();
        this.restore();
        return value;
    };
    Reader.prototype.skipUInt64 = function () {
        this.skip(8);
    };
    Reader.prototype.readVarUInt = function () {
        var buffer = this.readVarOctetString();
        if (buffer.length > Reader.MAX_INT_BYTES) {
            throw new parse_error_1.default('UInt of length ' + buffer.length +
                ' too large to parse as integer (max: ' + Reader.MAX_INT_BYTES + ')');
        }
        if (buffer.length === 0) {
            throw new parse_error_1.default('UInt of length 0 is invalid');
        }
        return buffer.readUIntBE(0, buffer.length);
    };
    Reader.prototype.peekVarUInt = function () {
        this.bookmark();
        var value = this.readVarUInt();
        this.restore();
        return value;
    };
    Reader.prototype.skipVarUInt = function () {
        this.skipVarOctetString();
    };
    Reader.prototype.readVarInt = function () {
        var buffer = this.readVarOctetString();
        if (buffer.length > Reader.MAX_INT_BYTES) {
            throw new parse_error_1.default('Int of length ' + buffer.length +
                ' too large to parse as integer (max: ' + Reader.MAX_INT_BYTES + ')');
        }
        if (buffer.length === 0) {
            throw new parse_error_1.default('Int of length 0 is invalid');
        }
        return buffer.readIntBE(0, buffer.length);
    };
    Reader.prototype.peekVarInt = function () {
        this.bookmark();
        var value = this.readVarInt();
        this.restore();
        return value;
    };
    Reader.prototype.skipVarInt = function () {
        this.skipVarOctetString();
    };
    Reader.prototype.readOctetString = function (length) {
        return this.read(length);
    };
    Reader.prototype.peekOctetString = function (length) {
        return this.peek(length);
    };
    Reader.prototype.skipOctetString = function (length) {
        return this.skip(length);
    };
    Reader.prototype.readLengthPrefix = function () {
        var length = this.readUInt8();
        if (length & Reader.HIGH_BIT) {
            var lengthPrefixLength = length & Reader.LOWER_SEVEN_BITS;
            var actualLength = this.readUInt(lengthPrefixLength);
            var minLength = Math.max(128, 1 << ((lengthPrefixLength - 1) * 8));
            if (actualLength < minLength) {
                throw new parse_error_1.default('Length prefix encoding is not canonical: ' +
                    actualLength + ' encoded in ' + lengthPrefixLength + ' bytes');
            }
            return actualLength;
        }
        return length;
    };
    Reader.prototype.readVarOctetString = function () {
        var length = this.readLengthPrefix();
        return this.read(length);
    };
    Reader.prototype.peekVarOctetString = function () {
        this.bookmark();
        var value = this.readVarOctetString();
        this.restore();
        return value;
    };
    Reader.prototype.skipVarOctetString = function () {
        var length = this.readLengthPrefix();
        return this.skip(length);
    };
    Reader.prototype.read = function (bytes) {
        this.ensureAvailable(bytes);
        var value = this.buffer.slice(this.cursor, this.cursor + bytes);
        this.cursor += bytes;
        return value;
    };
    Reader.prototype.peek = function (bytes) {
        this.ensureAvailable(bytes);
        return this.buffer.slice(this.cursor, this.cursor + bytes);
    };
    Reader.prototype.skip = function (bytes) {
        this.ensureAvailable(bytes);
        this.cursor += bytes;
    };
    return Reader;
}());
Reader.HIGH_BIT = 0x80;
Reader.LOWER_SEVEN_BITS = 0x7F;
Reader.MAX_INT_BYTES = 6;
;
['read', 'peek', 'skip'].forEach(function (verb) {
    ;
    [1, 2, 4].forEach(function (bytes) {
        Reader.prototype[verb + 'UInt' + bytes * 8] = function () {
            return this[verb + 'UInt'](bytes);
        };
        Reader.prototype[verb + 'Int' + bytes * 8] = function () {
            return this[verb + 'Int'](bytes);
        };
    });
});
exports.default = Reader;
//# sourceMappingURL=reader.js.map
{"version":3,"file":"index.js","sourceRoot":"","sources":["../index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Reader, Writer } from 'oer-utils'\nimport { dateToGeneralizedTime, generalizedTimeToDate } from './src/utils/date'\nimport { stringToTwoNumbers, twoNumbersToString } from './src/utils/uint64'\nimport base64url from 'base64url-adhoc'\nimport Long = require('long')\nimport times = require('lodash/times')\n\nenum Type {\n  TYPE_ILP_PAYMENT = 1,\n  TYPE_ILQP_LIQUIDITY_REQUEST = 2,\n  TYPE_ILQP_LIQUIDITY_RESPONSE = 3,\n  TYPE_ILQP_BY_SOURCE_REQUEST = 4,\n  TYPE_ILQP_BY_SOURCE_RESPONSE = 5,\n  TYPE_ILQP_BY_DESTINATION_REQUEST = 6,\n  TYPE_ILQP_BY_DESTINATION_RESPONSE = 7,\n  TYPE_ILP_ERROR = 8\n}\n\nconst serializeEnvelope = (type: number, contents: Buffer) => {\n  const writer = new Writer()\n  writer.writeUInt8(type)\n  writer.writeVarOctetString(contents)\n  return writer.getBuffer()\n}\n\nconst deserializeEnvelope = (binary: Buffer) => {\n  const envelopeReader = Reader.from(binary)\n  const type = envelopeReader.readUInt8()\n  const contents = envelopeReader.readVarOctetString()\n\n  return { type, contents }\n}\n\ninterface IlpPayment {\n  amount: string,\n  account: string,\n  data: string\n}\n\nconst serializeIlpPayment = (json: IlpPayment) => {\n  const writer = new Writer()\n\n  // amount\n  const amount = Long.fromString(json.amount, true)\n  writer.writeUInt32(amount.getHighBitsUnsigned())\n  writer.writeUInt32(amount.getLowBitsUnsigned())\n\n  // account\n  writer.writeVarOctetString(Buffer.from(json.account, 'ascii'))\n\n  // data\n  writer.writeVarOctetString(Buffer.from(json.data || '', 'base64'))\n\n  // extensibility\n  writer.writeUInt8(0)\n\n  return serializeEnvelope(Type.TYPE_ILP_PAYMENT, writer.getBuffer())\n}\n\nconst deserializeIlpPayment = (binary: Buffer): IlpPayment => {\n  const { type, contents } = deserializeEnvelope(binary)\n\n  if (type !== Type.TYPE_ILP_PAYMENT) {\n    throw new Error('Packet has incorrect type')\n  }\n\n  const reader = Reader.from(contents)\n\n  const highBits = reader.readUInt32()\n  const lowBits = reader.readUInt32()\n  const amount = Long.fromBits(lowBits, highBits, true).toString()\n  const account = reader.readVarOctetString().toString('ascii')\n  const data = base64url(reader.readVarOctetString())\n\n  // Ignore remaining bytes for extensibility\n\n  return {\n    amount,\n    account,\n    data\n  }\n}\n\ninterface IlqpLiquidityRequest {\n  destinationAccount: string,\n  destinationHoldDuration: number\n}\n\nconst serializeIlqpLiquidityRequest = (json: IlqpLiquidityRequest) => {\n  const writer = new Writer()\n\n  // destinationAccount\n  writer.writeVarOctetString(Buffer.from(json.destinationAccount, 'ascii'))\n\n  // destinationHoldDuration\n  writer.writeUInt32(json.destinationHoldDuration)\n\n  // extensibility\n  writer.writeUInt8(0)\n\n  return serializeEnvelope(Type.TYPE_ILQP_LIQUIDITY_REQUEST, writer.getBuffer())\n}\n\nconst deserializeIlqpLiquidityRequest = (binary: Buffer): IlqpLiquidityRequest => {\n  const { type, contents } = deserializeEnvelope(binary)\n\n  if (type !== Type.TYPE_ILQP_LIQUIDITY_REQUEST) {\n    throw new Error('Packet has incorrect type')\n  }\n\n  const reader = Reader.from(contents)\n\n  const destinationAccount = reader.readVarOctetString().toString('ascii')\n\n  const destinationHoldDuration = reader.readUInt32()\n\n  // Ignore remaining bytes for extensibility\n\n  return {\n    destinationAccount,\n    destinationHoldDuration\n  }\n}\n\ninterface IlqpLiquidityResponse {\n  liquidityCurve: Buffer,\n  appliesToPrefix: string,\n  sourceHoldDuration: number,\n  expiresAt: Date\n}\n\n// Each point in a liquidity curve is two UInt64s\nconst SIZE_OF_POINT = 16\n\nconst serializeIlqpLiquidityResponse = (json: IlqpLiquidityResponse) => {\n  const writer = new Writer()\n\n  // liquidityCurve\n  if (json.liquidityCurve.length % SIZE_OF_POINT !== 0) {\n    throw new Error(\n      'invalid liquidity curve, length must be multiple of ' +\n      SIZE_OF_POINT + ', but was: ' +\n      json.liquidityCurve.length\n    )\n  }\n  writer.writeVarUInt(json.liquidityCurve.length / SIZE_OF_POINT)\n  writer.write(json.liquidityCurve)\n\n  // appliesToPrefix\n  writer.writeVarOctetString(Buffer.from(json.appliesToPrefix, 'ascii'))\n\n  // sourceHoldDuration\n  writer.writeUInt32(json.sourceHoldDuration)\n\n  // expiresAt\n  writer.writeVarOctetString(Buffer.from(dateToGeneralizedTime(json.expiresAt), 'ascii'))\n\n  // extensibility\n  writer.writeUInt8(0)\n\n  return serializeEnvelope(Type.TYPE_ILQP_LIQUIDITY_RESPONSE, writer.getBuffer())\n}\n\nconst deserializeIlqpLiquidityResponse = (binary: Buffer): IlqpLiquidityResponse => {\n  const { type, contents } = deserializeEnvelope(binary)\n\n  if (type !== Type.TYPE_ILQP_LIQUIDITY_RESPONSE) {\n    throw new Error('Packet has incorrect type')\n  }\n\n  const reader = Reader.from(contents)\n\n  const numPoints = reader.readVarUInt()\n  const liquidityCurve = reader.read(numPoints * SIZE_OF_POINT)\n\n  const appliesToPrefix = reader.readVarOctetString().toString('ascii')\n\n  const sourceHoldDuration = reader.readUInt32()\n\n  const expiresAt = generalizedTimeToDate(reader.readVarOctetString().toString('ascii'))\n\n  // Ignore remaining bytes for extensibility\n\n  return {\n    liquidityCurve,\n    appliesToPrefix,\n    sourceHoldDuration,\n    expiresAt\n  }\n}\n\ninterface IlqpBySourceRequest {\n  destinationAccount: string,\n  sourceAmount: string,\n  destinationHoldDuration: number,\n}\n\nconst serializeIlqpBySourceRequest = (json: IlqpBySourceRequest) => {\n  const writer = new Writer()\n\n  // destinationAccount\n  writer.writeVarOctetString(Buffer.from(json.destinationAccount, 'ascii'))\n\n  // sourceAmount\n  writer.writeUInt64(stringToTwoNumbers(json.sourceAmount))\n\n  // destinationHoldDuration\n  writer.writeUInt32(json.destinationHoldDuration)\n\n  // extensibility\n  writer.writeUInt8(0)\n\n  return serializeEnvelope(Type.TYPE_ILQP_BY_SOURCE_REQUEST, writer.getBuffer())\n}\n\nconst deserializeIlqpBySourceRequest = (binary: Buffer): IlqpBySourceRequest => {\n  const { type, contents } = deserializeEnvelope(binary)\n\n  if (type !== Type.TYPE_ILQP_BY_SOURCE_REQUEST) {\n    throw new Error('Packet has incorrect type')\n  }\n\n  const reader = Reader.from(contents)\n\n  const destinationAccount = reader.readVarOctetString().toString('ascii')\n\n  const sourceAmount = twoNumbersToString(reader.readUInt64())\n\n  const destinationHoldDuration = reader.readUInt32()\n\n  // Ignore remaining bytes for extensibility\n\n  return {\n    destinationAccount,\n    sourceAmount,\n    destinationHoldDuration\n  }\n}\n\ninterface IlqpBySourceResponse {\n  destinationAmount: string,\n  sourceHoldDuration: number,\n}\n\nconst serializeIlqpBySourceResponse = (json: IlqpBySourceResponse) => {\n  const writer = new Writer()\n\n  // destinationAmount\n  // TODO: Proper UInt64 support\n  writer.writeUInt64(stringToTwoNumbers(json.destinationAmount))\n\n  // sourceHoldDuration\n  writer.writeUInt32(json.sourceHoldDuration)\n\n  // extensibility\n  writer.writeUInt8(0)\n\n  return serializeEnvelope(Type.TYPE_ILQP_BY_SOURCE_RESPONSE, writer.getBuffer())\n}\n\nconst deserializeIlqpBySourceResponse = (binary: Buffer): IlqpBySourceResponse => {\n  const { type, contents } = deserializeEnvelope(binary)\n\n  if (type !== Type.TYPE_ILQP_BY_SOURCE_RESPONSE) {\n    throw new Error('Packet has incorrect type')\n  }\n\n  const reader = Reader.from(contents)\n\n  const destinationAmount = twoNumbersToString(reader.readUInt64())\n\n  const sourceHoldDuration = reader.readUInt32()\n\n  // Ignore remaining bytes for extensibility\n\n  return {\n    destinationAmount,\n    sourceHoldDuration\n  }\n}\n\ninterface IlqpByDestinationRequest {\n  destinationAccount: string,\n  destinationAmount: string,\n  destinationHoldDuration: number,\n}\n\nconst serializeIlqpByDestinationRequest = (json: IlqpByDestinationRequest) => {\n  const writer = new Writer()\n\n  // destinationAccount\n  writer.writeVarOctetString(Buffer.from(json.destinationAccount, 'ascii'))\n\n  // destinationAmount\n  writer.writeUInt64(stringToTwoNumbers(json.destinationAmount))\n\n  // destinationHoldDuration\n  writer.writeUInt32(json.destinationHoldDuration)\n\n  // extensibility\n  writer.writeUInt8(0)\n\n  return serializeEnvelope(Type.TYPE_ILQP_BY_DESTINATION_REQUEST, writer.getBuffer())\n}\n\nconst deserializeIlqpByDestinationRequest = (binary: Buffer): IlqpByDestinationRequest => {\n  const { type, contents } = deserializeEnvelope(binary)\n\n  if (type !== Type.TYPE_ILQP_BY_DESTINATION_REQUEST) {\n    throw new Error('Packet has incorrect type')\n  }\n\n  const reader = Reader.from(contents)\n\n  const destinationAccount = reader.readVarOctetString().toString('ascii')\n\n  const destinationAmount = twoNumbersToString(reader.readUInt64())\n\n  const destinationHoldDuration = reader.readUInt32()\n\n  // Ignore remaining bytes for extensibility\n\n  return {\n    destinationAccount,\n    destinationAmount,\n    destinationHoldDuration\n  }\n}\n\ninterface IlqpByDestinationResponse {\n  sourceAmount: string,\n  sourceHoldDuration: number,\n}\n\nconst serializeIlqpByDestinationResponse = (json: IlqpByDestinationResponse) => {\n  const writer = new Writer()\n\n  // destinationAmount\n  // TODO: Proper UInt64 support\n  writer.writeUInt64(stringToTwoNumbers(json.sourceAmount))\n\n  // sourceHoldDuration\n  writer.writeUInt32(json.sourceHoldDuration)\n\n  // extensibility\n  writer.writeUInt8(0)\n\n  return serializeEnvelope(Type.TYPE_ILQP_BY_DESTINATION_RESPONSE, writer.getBuffer())\n}\n\nconst deserializeIlqpByDestinationResponse = (binary: Buffer): IlqpByDestinationResponse => {\n  const { type, contents } = deserializeEnvelope(binary)\n\n  if (type !== Type.TYPE_ILQP_BY_DESTINATION_RESPONSE) {\n    throw new Error('Packet has incorrect type')\n  }\n\n  const reader = Reader.from(contents)\n\n  const sourceAmount = twoNumbersToString(reader.readUInt64())\n\n  const sourceHoldDuration = reader.readUInt32()\n\n  // Ignore remaining bytes for extensibility\n\n  return {\n    sourceAmount,\n    sourceHoldDuration\n  }\n}\n\ninterface IlpError {\n  code: string,\n  name: string,\n  triggeredBy: string,\n  forwardedBy: string[],\n  triggeredAt: Date,\n  data: string\n}\n\nconst ILP_ERROR_CODE_LENGTH = 3\n\nconst serializeIlpError = (json: IlpError) => {\n  const writer = new Writer()\n\n  // Convert code to buffer to ensure we are counting bytes, not UTF8 characters\n  const codeBuffer = Buffer.from(json.code, 'ascii')\n  if (codeBuffer.length !== ILP_ERROR_CODE_LENGTH) {\n    throw new Error('ILP error codes must be three bytes long, received: ' + json.code)\n  }\n\n  // code\n  writer.write(codeBuffer)\n\n  // name\n  writer.writeVarOctetString(Buffer.from(json.name, 'ascii'))\n\n  // triggeredBy\n  writer.writeVarOctetString(Buffer.from(json.triggeredBy, 'ascii'))\n\n  // forwardedBy\n  writer.writeVarUInt(json.forwardedBy.length)\n  json.forwardedBy.forEach(forwardedBy => {\n    writer.writeVarOctetString(Buffer.from(forwardedBy, 'ascii'))\n  })\n\n  // triggeredAt\n  writer.writeVarOctetString(Buffer.from(dateToGeneralizedTime(json.triggeredAt), 'ascii'))\n\n  // data\n  writer.writeVarOctetString(Buffer.from(json.data, 'ascii'))\n\n  // extensibility\n  writer.writeUInt8(0)\n\n  return serializeEnvelope(Type.TYPE_ILP_ERROR, writer.getBuffer())\n}\n\nconst deserializeIlpError = (binary: Buffer): IlpError => {\n  const { type, contents } = deserializeEnvelope(binary)\n\n  if (type !== Type.TYPE_ILP_ERROR) {\n    throw new Error('Packet has incorrect type')\n  }\n\n  const reader = Reader.from(contents)\n\n  const code = reader.read(ILP_ERROR_CODE_LENGTH).toString('ascii')\n\n  const name = reader.readVarOctetString().toString('ascii')\n\n  const triggeredBy = reader.readVarOctetString().toString('ascii')\n\n  const forwardedBy = times(reader.readVarUInt()).map(() => {\n    return reader.readVarOctetString().toString('ascii')\n  })\n\n  const triggeredAt = generalizedTimeToDate(reader.readVarOctetString().toString('ascii'))\n\n  const data = reader.readVarOctetString().toString('ascii')\n\n  // Ignore remaining bytes for extensibility\n\n  return {\n    code,\n    name,\n    triggeredBy,\n    forwardedBy,\n    triggeredAt,\n    data\n  }\n}\n\nmodule.exports = {\n  Type,\n  serializeIlpPayment,\n  deserializeIlpPayment,\n  serializeIlqpLiquidityRequest,\n  deserializeIlqpLiquidityRequest,\n  serializeIlqpLiquidityResponse,\n  deserializeIlqpLiquidityResponse,\n  serializeIlqpBySourceRequest,\n  deserializeIlqpBySourceRequest,\n  serializeIlqpBySourceResponse,\n  deserializeIlqpBySourceResponse,\n  serializeIlqpByDestinationRequest,\n  deserializeIlqpByDestinationRequest,\n  serializeIlqpByDestinationResponse,\n  deserializeIlqpByDestinationResponse,\n  serializeIlpError,\n  deserializeIlpError\n}\n"]}
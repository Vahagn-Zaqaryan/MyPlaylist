{"version":3,"file":"reader.js","sourceRoot":"","sources":["../../../src/lib/reader.ts"],"names":[],"mappings":"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","sourcesContent":["import UnderflowError from '../errors/underflow-error'\nimport ParseError from '../errors/parse-error'\n\nclass Reader {\n  // Most significant bit in a byte\n  static HIGH_BIT = 0x80\n\n  // Other bits in a byte\n  static LOWER_SEVEN_BITS = 0x7F\n\n  // Largest integer (in bytes) that is safely representable in JavaScript\n  // => Math.floor(Number.MAX_SAFE_INTEGER.toString(2).length / 8)\n  static MAX_INT_BYTES = 6\n\n  buffer: Buffer\n  cursor: number\n  bookmarks: number[]\n\n  constructor (buffer: Buffer) {\n    this.buffer = buffer\n    this.cursor = 0\n    this.bookmarks = []\n  }\n\n  /**\n   * Create a Reader from a source of bytes.\n   *\n   * Currently, this method only allows the creation of a Reader from a Buffer.\n   *\n   * If the object provided is already a Reader, that reader is returned as is.\n   *\n   * @param {Reader|Buffer} source Source of binary data.\n   * @return {Reader} Instance of Reader\n   */\n  static from (source: Buffer | Reader) {\n    if (Buffer.isBuffer(source)) {\n      return new Reader(source)\n    } else if (source instanceof Reader) {\n      return new Reader(source.buffer.slice(source.cursor))\n    } else {\n      throw new Error('Reader must be given a Buffer')\n    }\n  }\n\n  /**\n   * Store the current cursor position on a stack.\n   */\n  bookmark () {\n    this.bookmarks.push(this.cursor)\n  }\n\n  /**\n   * Pop the most recently bookmarked cursor position off the stack.\n   */\n  restore () {\n    if (!this.bookmarks.length) {\n      throw new Error('Cannot restore bookmark when no bookmark set')\n    }\n    this.cursor = this.bookmarks.pop()!\n  }\n\n  /**\n   * Ensure this number of bytes is buffered.\n   *\n   * This method checks that the given number of bytes is buffered and available\n   * for reading. If insufficient bytes are available, the method throws an\n   * `UnderflowError`.\n   *\n   * @param {number} bytes Number of bytes that should be available.\n   */\n  ensureAvailable (bytes: number) {\n    if (this.buffer.length < (this.cursor + bytes)) {\n      throw new UnderflowError('Tried to read ' + bytes + ' bytes, but only ' +\n        (this.buffer.length - this.cursor) + ' bytes available')\n    }\n  }\n\n  /**\n   * Read a fixed-length unsigned big-endian integer.\n   *\n   * @param {number} length Length of the integer in bytes.\n   * @return {number} Contents of next byte.\n   */\n  readUInt (length: number) {\n    const value = this.peekUInt(length)\n    this.cursor += length\n    return value\n  }\n\n  /**\n   * Look at a fixed-length unsigned integer, but don't advance the cursor.\n   *\n   * @param {number} length Length of the integer in bytes.\n   * @return {number} Contents of the next byte.\n   */\n  peekUInt (length: number) {\n    if (length === 0) {\n      return 0\n    }\n    if (length < 0) {\n      throw new Error('Tried to read integer with negative length (provided: ' +\n        length + ')')\n    }\n    if (length > Reader.MAX_INT_BYTES) {\n      throw new Error('Tried to read too large integer (requested: ' +\n        length + ', max: ' + Reader.MAX_INT_BYTES + ')')\n    }\n    this.ensureAvailable(length)\n    const value = this.buffer.readUIntBE(this.cursor, length)\n    return value\n  }\n\n  /**\n   * Advance cursor by length bytes.\n   */\n  skipUInt (length: number) {\n    this.skip(length)\n  }\n\n  /**\n   * Read a fixed-length signed big-endian integer.\n   *\n   * @param {number} length Length of the integer in bytes.\n   * @return {number} Contents of next byte.\n   */\n  readInt (length: number) {\n    const value = this.peekInt(length)\n    this.cursor += length\n    return value\n  }\n\n  /**\n   * Look at a fixed-length signed integer, but don't advance the cursor.\n   *\n   * @param {number} length Length of the integer in bytes.\n   * @return {number} Contents of the next byte.\n   */\n  peekInt (length: number) {\n    if (length === 0) {\n      return 0\n    }\n    if (length < 0) {\n      throw new Error('Tried to read integer with negative length (provided: ' +\n        length + ')')\n    }\n    if (length > Reader.MAX_INT_BYTES) {\n      throw new Error('Tried to read too large integer (requested: ' +\n        length + ', max: ' + Reader.MAX_INT_BYTES + ')')\n    }\n    this.ensureAvailable(length)\n    const value = this.buffer.readIntBE(this.cursor, length)\n    return value\n  }\n\n  /**\n   * Advance cursor by length bytes.\n   */\n  skipInt (length: number) {\n    this.skip(length)\n  }\n\n  /**\n   * Read a 64-bit integer.\n   *\n   * @return {number[]} Integer in the form [high, low]\n   */\n  readUInt64 () {\n    return [ this.readUInt32(), this.readUInt32() ]\n  }\n\n  /**\n   * Look at a 64-bit integer, but don't advance the cursor.\n   *\n   * @return {number[]} Integer in the form [high, low]\n   */\n  peekUInt64 () {\n    this.bookmark()\n    const value = this.readUInt64()\n    this.restore()\n    return value\n  }\n\n  /**\n   * Advance the cursor by eight bytes.\n   */\n  skipUInt64 () {\n    this.skip(8)\n  }\n\n  /**\n   * Read a variable-length unsigned integer at the cursor position.\n   *\n   * Return the integer as a number and advance the cursor accordingly.\n   *\n   * @return {number} Value of the integer.\n   */\n  readVarUInt () {\n    const buffer = this.readVarOctetString()\n    if (buffer.length > Reader.MAX_INT_BYTES) {\n      throw new ParseError('UInt of length ' + buffer.length +\n        ' too large to parse as integer (max: ' + Reader.MAX_INT_BYTES + ')')\n    }\n\n    if (buffer.length === 0) {\n      throw new ParseError('UInt of length 0 is invalid')\n    }\n\n    return buffer.readUIntBE(0, buffer.length)\n  }\n\n  /**\n   * Read the next variable-length unsigned integer, but don't advance the cursor.\n   *\n   * @return {number} Integer at the cursor position.\n   */\n  peekVarUInt () {\n    this.bookmark()\n    const value = this.readVarUInt()\n    this.restore()\n\n    return value\n  }\n\n  /**\n   * Skip past the variable-length unsigned integer at the cursor position.\n   *\n   * Since variable integers are encoded the same way as octet strings, this\n   * method is equivalent to skipVarOctetString.\n   */\n  skipVarUInt () {\n    this.skipVarOctetString()\n  }\n\n  /**\n   * Read a variable-length unsigned integer at the cursor position.\n   *\n   * Return the integer as a number and advance the cursor accordingly.\n   *\n   * @return {number} Value of the integer.\n   */\n  readVarInt () {\n    const buffer = this.readVarOctetString()\n    if (buffer.length > Reader.MAX_INT_BYTES) {\n      throw new ParseError('Int of length ' + buffer.length +\n        ' too large to parse as integer (max: ' + Reader.MAX_INT_BYTES + ')')\n    }\n\n    if (buffer.length === 0) {\n      throw new ParseError('Int of length 0 is invalid')\n    }\n\n    return buffer.readIntBE(0, buffer.length)\n  }\n\n  /**\n   * Read the next variable-length unsigned integer, but don't advance the cursor.\n   *\n   * @return {number} Integer at the cursor position.\n   */\n  peekVarInt () {\n    this.bookmark()\n    const value = this.readVarInt()\n    this.restore()\n\n    return value\n  }\n\n  /**\n   * Skip past the variable-length signed integer at the cursor position.\n   *\n   * Since variable integers are encoded the same way as octet strings, this\n   * method is equivalent to skipVarOctetString.\n   */\n  skipVarInt () {\n    this.skipVarOctetString()\n  }\n\n  /**\n   * Read a fixed-length octet string.\n   *\n   * @param {number} length Length of the octet string.\n   */\n  readOctetString (length: number) {\n    return this.read(length)\n  }\n\n  /**\n   * Peek at a fixed length octet string.\n   *\n   * @param {number} length Length of the octet string.\n   */\n  peekOctetString (length: number) {\n    return this.peek(length)\n  }\n\n  /**\n   * Skip a fixed length octet string.\n   *\n   * @param {number} length Length of the octet string.\n   */\n  skipOctetString (length: number) {\n    return this.skip(length)\n  }\n\n  /**\n   * Read a length prefix.\n   *\n   * You shouldn't need this. Length prefixes are used internally by\n   * variable-length octet strings and integers.\n   *\n   * @return {number} Length value.\n   */\n  readLengthPrefix () {\n    const length = this.readUInt8()\n\n    if (length & Reader.HIGH_BIT) {\n      const lengthPrefixLength = length & Reader.LOWER_SEVEN_BITS\n      const actualLength = this.readUInt(lengthPrefixLength)\n\n      // Reject lengths that could have been encoded with a shorter prefix\n      const minLength = Math.max(128, 1 << ((lengthPrefixLength - 1) * 8))\n      if (actualLength < minLength) {\n        throw new ParseError('Length prefix encoding is not canonical: ' +\n          actualLength + ' encoded in ' + lengthPrefixLength + ' bytes')\n      }\n\n      return actualLength\n    }\n\n    return length\n  }\n\n  /**\n   * Read a variable-length octet string.\n   *\n   * A variable-length octet string is a length-prefixed set of arbitrary bytes.\n   *\n   * @return {Buffer} Contents of the octet string.\n   */\n  readVarOctetString () {\n    const length = this.readLengthPrefix()\n\n    return this.read(length)\n  }\n\n  /**\n   * Read a variable-length buffer, but do not advance cursor position.\n   *\n   * @return {Buffer} Contents of the buffer.\n   */\n  peekVarOctetString () {\n    this.bookmark()\n    const value = this.readVarOctetString()\n    this.restore()\n\n    return value\n  }\n\n  /**\n   * Skip a variable-length buffer.\n   */\n  skipVarOctetString () {\n    const length = this.readLengthPrefix()\n\n    return this.skip(length)\n  }\n\n  /**\n   * Read a given number of bytes.\n   *\n   * Returns this many bytes starting at the cursor position and advances the\n   * cursor.\n   *\n   * @param {number} bytes Number of bytes to read.\n   * @return {Buffer} Contents of bytes read.\n   */\n  read (bytes: number) {\n    this.ensureAvailable(bytes)\n\n    const value = this.buffer.slice(this.cursor, this.cursor + bytes)\n    this.cursor += bytes\n\n    return value\n  }\n\n  /**\n   * Read bytes, but do not advance cursor.\n   *\n   * @param {number} bytes Number of bytes to read.\n   * @return {Buffer} Contents of bytes read.\n   */\n  peek (bytes: number) {\n    this.ensureAvailable(bytes)\n\n    return this.buffer.slice(this.cursor, this.cursor + bytes)\n  }\n\n  /**\n   * Skip a number of bytes.\n   *\n   * Advances the cursor by this many bytes.\n   *\n   * @param {number} bytes Number of bytes to advance the cursor by.\n   */\n  skip (bytes: number) {\n    this.ensureAvailable(bytes)\n\n    this.cursor += bytes\n  }\n}\n\ninterface Reader {\n  readUInt8 (): number\n  readUInt16 (): number\n  readUInt32 (): number\n  peekUInt8 (): number\n  peekUInt16 (): number\n  peekUInt32 (): number\n  skipUInt8 (): number\n  skipUInt16 (): number\n  skipUInt32 (): number\n  readInt8 (): number\n  readInt16 (): number\n  readInt32 (): number\n  peekInt8 (): number\n  peekInt16 (): number\n  peekInt32 (): number\n  skipInt8 (): number\n  skipInt16 (): number\n  skipInt32 (): number\n}\n\n// Create {read,peek,skip}UInt{8,16,32} shortcuts\n;['read', 'peek', 'skip'].forEach((verb) => {\n  ;[1, 2, 4].forEach((bytes) => {\n    Reader.prototype[verb + 'UInt' + bytes * 8] = function () {\n      return this[verb + 'UInt'](bytes)\n    }\n\n    Reader.prototype[verb + 'Int' + bytes * 8] = function () {\n      return this[verb + 'Int'](bytes)\n    }\n  })\n})\n\nexport default Reader\n"]}
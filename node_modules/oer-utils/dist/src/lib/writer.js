"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var isInteger = require("core-js/library/fn/number/is-integer");
var MAX_SAFE_INTEGER = require("core-js/library/fn/number/max-safe-integer");
var Writer = (function () {
    function Writer() {
        this.components = [];
    }
    Writer.prototype.writeUInt = function (value, length) {
        if (!isInteger(value)) {
            throw new Error('UInt must be an integer');
        }
        else if (value < 0) {
            throw new Error('UInt must be positive');
        }
        else if (length <= 0) {
            throw new Error('UInt length must be greater than zero');
        }
        else if (value > Writer.MAX_SAFE_INTEGER) {
            throw new Error('UInt is larger than safe JavaScript range');
        }
        else if (value > Writer.UINT_RANGES[length]) {
            throw new Error('UInt ' + value + ' does not fit in ' + length + ' bytes');
        }
        var buffer = new Buffer(length);
        buffer.writeUIntBE(value, 0, length);
        this.write(buffer);
    };
    Writer.prototype.writeInt = function (value, length) {
        if (!isInteger(value)) {
            throw new Error('Int must be an integer');
        }
        else if (length <= 0) {
            throw new Error('Int length must be greater than zero');
        }
        else if (value > Writer.MAX_SAFE_INTEGER) {
            throw new Error('Int is larger than safe JavaScript range');
        }
        else if (value < Writer.MIN_SAFE_INTEGER) {
            throw new Error('Int is smaller than safe JavaScript range');
        }
        else if (value < Writer.INT_RANGES[length][0]) {
            throw new Error('Int ' + value + ' does not fit in ' + length + ' bytes');
        }
        else if (value > Writer.INT_RANGES[length][1]) {
            throw new Error('Int ' + value + ' does not fit in ' + length + ' bytes');
        }
        var buffer = new Buffer(length);
        buffer.writeIntBE(value, 0, length);
        this.write(buffer);
    };
    Writer.prototype.writeVarUInt = function (value) {
        if (Buffer.isBuffer(value)) {
            this.writeVarOctetString(value);
            return;
        }
        else if (!isInteger(value)) {
            throw new Error('UInt must be an integer');
        }
        else if (value < 0) {
            throw new Error('UInt must be positive');
        }
        else if (value > Writer.MAX_SAFE_INTEGER) {
            throw new Error('UInt is larger than safe JavaScript range');
        }
        var lengthOfValue = Math.ceil(value.toString(2).length / 8);
        var buffer = new Buffer(lengthOfValue);
        buffer.writeUIntBE(value, 0, lengthOfValue);
        this.writeVarOctetString(buffer);
    };
    Writer.prototype.writeVarInt = function (value) {
        if (Buffer.isBuffer(value)) {
            this.writeVarOctetString(value);
            return;
        }
        else if (!isInteger(value)) {
            throw new Error('Int must be an integer');
        }
        else if (value > Writer.MAX_SAFE_INTEGER) {
            throw new Error('Int is larger than safe JavaScript range');
        }
        else if (value < Writer.MIN_SAFE_INTEGER) {
            throw new Error('Int is smaller than safe JavaScript range');
        }
        var lengthDeterminingValue = (value < 0) ? 1 - value : value;
        var lengthOfValue = Math.ceil((lengthDeterminingValue.toString(2).length + 1) / 8);
        var buffer = new Buffer(lengthOfValue);
        buffer.writeIntBE(value, 0, lengthOfValue);
        this.writeVarOctetString(buffer);
    };
    Writer.prototype.writeUInt64 = function (value) {
        if (typeof value === 'number' && isInteger(value) && value <= Writer.MAX_SAFE_INTEGER) {
            this.writeUInt32(Math.floor(value / 0x100000000));
            this.writeUInt32(value & 0xffffffff);
            return;
        }
        else if (!Array.isArray(value) || value.length !== 2 ||
            !isInteger(value[0]) || !isInteger(value[1])) {
            throw new TypeError('Expected 64-bit integer as an array of two 32-bit words');
        }
        this.writeUInt32(value[0]);
        this.writeUInt32(value[1]);
    };
    Writer.prototype.writeOctetString = function (buffer, length) {
        if (buffer.length !== length) {
            throw new Error('Incorrect length for octet string (actual: ' +
                buffer.length + ', expected: ' + length + ')');
        }
        this.write(buffer);
    };
    Writer.prototype.writeVarOctetString = function (buffer) {
        if (!Buffer.isBuffer(buffer)) {
            throw new TypeError('Expects a buffer');
        }
        var MSB = 0x80;
        if (buffer.length <= 127) {
            this.writeUInt8(buffer.length);
        }
        else {
            var lengthOfLength = Math.ceil(buffer.length.toString(2).length / 8);
            this.writeUInt8(MSB | lengthOfLength);
            this.writeUInt(buffer.length, lengthOfLength);
        }
        this.write(buffer);
    };
    Writer.prototype.write = function (buffer) {
        this.components.push(buffer);
    };
    Writer.prototype.getBuffer = function () {
        return Buffer.concat(this.components);
    };
    return Writer;
}());
Writer.MAX_SAFE_INTEGER = MAX_SAFE_INTEGER;
Writer.MIN_SAFE_INTEGER = require('core-js/library/fn/number/min-safe-integer');
Writer.UINT_RANGES = {
    1: 0xff,
    2: 0xffff,
    3: 0xffffff,
    4: 0xffffffff,
    5: 0xffffffffff,
    6: 0xffffffffffff
};
Writer.INT_RANGES = {
    1: [-0x80, 0x7f],
    2: [-0x8000, 0x7fff],
    3: [-0x800000, 0x7fffff],
    4: [-0x80000000, 0x7fffffff],
    5: [-0x8000000000, 0x7fffffffff],
    6: [-0x800000000000, 0x7fffffffffff]
};
;
[1, 2, 4].forEach(function (bytes) {
    Writer.prototype['writeUInt' + bytes * 8] = function (value) {
        this.writeUInt(value, bytes);
    };
    Writer.prototype['writeInt' + bytes * 8] = function (value) {
        this.writeInt(value, bytes);
    };
});
exports.default = Writer;
//# sourceMappingURL=writer.js.map
{"version":3,"file":"parser.spec.js","sourceRoot":"","sources":["../../test/parser.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai'\n\nimport loadTests from './helpers/loadTests'\n\nconst Parser = require('..')\n\ndescribe('Parser', function () {\n  describe('serializeIlpPayment', function () {\n    describe('correctly serializes valid ilp packets', function () {\n      const validTests = loadTests({ type: 'ilp_payment' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const json = test.json\n\n          const serialized = Parser.serializeIlpPayment(json)\n\n          assert.deepEqual(serialized.toString('hex'), test.binary)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlpPayment', function () {\n    describe('correctly parses valid ilp packets', function () {\n      const validTests = loadTests({ type: 'ilp_payment' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const binary = new Buffer(test.binary, 'hex')\n\n          const parsed = Parser.deserializeIlpPayment(binary)\n\n          assert.deepEqual(parsed, test.json)\n        })\n      }\n    })\n  })\n\n  describe('serializeIlqpLiquidityRequest', function () {\n    describe('correctly serializes valid ilqp liquidity requests', function () {\n      const validTests = loadTests({ type: 'ilqp_liquidity_request' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const json = test.json\n\n          const serialized = Parser.serializeIlqpLiquidityRequest(json)\n\n          assert.deepEqual(serialized.toString('hex'), test.binary)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlqpLiquidityRequest', function () {\n    describe('correctly parses valid ilqp liquidity requests', function () {\n      const validTests = loadTests({ type: 'ilqp_liquidity_request' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const binary = new Buffer(test.binary, 'hex')\n\n          const parsed = Parser.deserializeIlqpLiquidityRequest(binary)\n\n          assert.deepEqual(parsed, test.json)\n        })\n      }\n    })\n  })\n\n  describe('serializeIlqpLiquidityResponse', function () {\n    describe('correctly serializes valid ilqp liquidity responses', function () {\n      const validTests = loadTests({ type: 'ilqp_liquidity_response' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const json = test.json\n\n          json.expiresAt = new Date(json.expiresAt)\n          json.liquidityCurve = Buffer.from(json.liquidityCurve, 'hex')\n\n          const serialized = Parser.serializeIlqpLiquidityResponse(json)\n\n          assert.deepEqual(serialized.toString('hex'), test.binary)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlqpLiquidityResponse', function () {\n    describe('correctly parses valid ilqp liquidity responses', function () {\n      const validTests = loadTests({ type: 'ilqp_liquidity_response' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const binary = new Buffer(test.binary, 'hex')\n\n          const parsed = Parser.deserializeIlqpLiquidityResponse(binary)\n\n          parsed.expiresAt = parsed.expiresAt.getTime()\n          parsed.liquidityCurve = parsed.liquidityCurve.toString('hex')\n\n          assert.deepEqual(parsed, test.json)\n        })\n      }\n    })\n  })\n\n  describe('serializeIlqpBySourceRequest', function () {\n    describe('correctly serializes valid ilqp by source requests', function () {\n      const validTests = loadTests({ type: 'ilqp_by_source_request' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const json = test.json\n\n          const serialized = Parser.serializeIlqpBySourceRequest(json)\n\n          assert.deepEqual(serialized.toString('hex'), test.binary)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlqpBySourceRequest', function () {\n    describe('correctly parses valid ilqp by source requests', function () {\n      const validTests = loadTests({ type: 'ilqp_by_source_request' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const binary = new Buffer(test.binary, 'hex')\n\n          const parsed = Parser.deserializeIlqpBySourceRequest(binary)\n\n          assert.deepEqual(parsed, test.json)\n        })\n      }\n    })\n  })\n\n  describe('serializeIlqpBySourceResponse', function () {\n    describe('correctly serializes valid ilqp by source responses', function () {\n      const validTests = loadTests({ type: 'ilqp_by_source_response' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const json = test.json\n\n          const serialized = Parser.serializeIlqpBySourceResponse(json)\n\n          assert.deepEqual(serialized.toString('hex'), test.binary)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlqpBySourceResponse', function () {\n    describe('correctly parses valid ilqp by source responses', function () {\n      const validTests = loadTests({ type: 'ilqp_by_source_response' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const binary = new Buffer(test.binary, 'hex')\n\n          const parsed = Parser.deserializeIlqpBySourceResponse(binary)\n\n          assert.deepEqual(parsed, test.json)\n        })\n      }\n    })\n  })\n\n  describe('serializeIlqpByDestinationRequest', function () {\n    describe('correctly serializes valid ilqp by destination requests', function () {\n      const validTests = loadTests({ type: 'ilqp_by_destination_request' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const json = test.json\n\n          const serialized = Parser.serializeIlqpByDestinationRequest(json)\n\n          assert.deepEqual(serialized.toString('hex'), test.binary)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlqpByDestinationRequest', function () {\n    describe('correctly parses valid ilqp by destination requests', function () {\n      const validTests = loadTests({ type: 'ilqp_by_destination_request' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const binary = new Buffer(test.binary, 'hex')\n\n          const parsed = Parser.deserializeIlqpByDestinationRequest(binary)\n\n          assert.deepEqual(parsed, test.json)\n        })\n      }\n    })\n  })\n\n  describe('serializeIlqpByDestinationResponse', function () {\n    describe('correctly serializes valid ilqp by destination responses', function () {\n      const validTests = loadTests({ type: 'ilqp_by_destination_response' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const json = test.json\n\n          const serialized = Parser.serializeIlqpByDestinationResponse(json)\n\n          assert.deepEqual(serialized.toString('hex'), test.binary)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlqpByDestinationResponse', function () {\n    describe('correctly parses valid ilqp by destination responses', function () {\n      const validTests = loadTests({ type: 'ilqp_by_destination_response' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const binary = new Buffer(test.binary, 'hex')\n\n          const parsed = Parser.deserializeIlqpByDestinationResponse(binary)\n\n          assert.deepEqual(parsed, test.json)\n        })\n      }\n    })\n  })\n\n  describe('serializeIlpError', function () {\n    describe('correctly serializes valid ilqp by destination responses', function () {\n      const validTests = loadTests({ type: 'ilp_error' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const json = test.json\n\n          json.triggeredAt = new Date(json.triggeredAt)\n\n          const serialized = Parser.serializeIlpError(json)\n\n          assert.deepEqual(serialized.toString('hex'), test.binary)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlpError', function () {\n    describe('correctly parses valid ilqp by destination responses', function () {\n      const validTests = loadTests({ type: 'ilp_error' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const binary = new Buffer(test.binary, 'hex')\n\n          const parsed = Parser.deserializeIlpError(binary)\n\n          parsed.triggeredAt = parsed.triggeredAt.getTime()\n\n          assert.deepEqual(parsed, test.json)\n        })\n      }\n    })\n  })\n})\n"]}